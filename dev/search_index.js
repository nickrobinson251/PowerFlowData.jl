var documenterSearchIndex = {"docs":
[{"location":"api.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"parse_network","category":"page"},{"location":"api.html#PowerFlowData.parse_network","page":"API","title":"PowerFlowData.parse_network","text":"parse_network(source) -> Network\n\nRead a PSS/E-format .raw Power Flow Data file and return a Network object.\n\nThe version of the PSS/E format can be specified with the v keyword, like v=33, or else it will be automatically detected when parsing the file.\n\nThe delimiter can be specified with the delim keyword, like delim=' ', or else it will be automatically detected when parsing the file.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Network","page":"API","title":"Network","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Network","category":"page"},{"location":"api.html#PowerFlowData.Network","page":"API","title":"PowerFlowData.Network","text":"struct Network\n\nRepresentation of a power network.\n\nThe PSS/E data format comprises 16 data categories of network and equipment elements, each of which requires a particular type of data.\n\nSimilarly, a Network stores the data from each category in its own dedicated structure.\n\nCurrently supported are:\n\nCaseID\nBuses\nLoads\nFixedShunts\nGenerators\nBranches\nTransformers\nAreaInterchanges\nTwoTerminalDCLines\nVSCDCLines\nSwitchedShunts\nImpedanceCorrections\nMultiTerminalDCLines\nMultiSectionLineGroups\nZones\nInterAreaTransfers\nOwners\nFACTSDevices\n\nCaseID data is a single row (in the Tables.jl-sense). You can access it like network.caseid and interact with it like a NamedTuple, or even convert it to a NamedTuple with NamedTuple(caseid).\n\nAll other records (buses, loads, etc.) can be accessed also via the fields, for example network.buses, and each is returned as lightweight table structure (again, in the Tables.jl-sense). That is, all structures implement the Tables.jl interface, so can be passed to any valid sink, such as a DataFrame like DataFrame(network.buses).\n\nFor more info on working with tables see Tables.jl, and for common table operations see TableOperations.jl.\n\nFields\n\nversion::Int8\nVersion of the PSS/E data version given or detected when parsing.\ncaseid::CaseID\nCase identification data.\nbuses::Buses\nBus records.\nloads::Loads\nLoad records.\nfixed_shunts::Union{Nothing, FixedShunts}\nFixed Bus Shunt records.\ngenerators::Generators\nGenerator records.\nbranches::Branches\nNon-transformer Branch records.\ntransformers::Transformers\nTransformer records.\narea_interchanges::AreaInterchanges\nArea Interchange records.\ntwo_terminal_dc::TwoTerminalDCLines\nTwo-terminal DC Line records.\nvsc_dc::VSCDCLines\nVoltage Source Converter DC Line records.\nswitched_shunts::SwitchedShunts\nSwitched Shunt records.\nimpedance_corrections::ImpedanceCorrections\nTransformer impedance correction records.\nmulti_terminal_dc::MultiTerminalDCLines\nMulti-terminal DC Line records.\nmulti_section_lines::MultiSectionLineGroups\nMulti-section line group records.\nzones::Zones\nZone records.\narea_transfers::InterAreaTransfers\nInter-area transfer records.\nowners::Owners\nOwner records.\nfacts::FACTSDevices\nFACTS device records.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Case-ID","page":"API","title":"Case ID","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"CaseID","category":"page"},{"location":"api.html#PowerFlowData.CaseID","page":"API","title":"PowerFlowData.CaseID","text":"struct CaseID <: PowerFlowData.IDRow\n\nCase identification data.\n\nFields\n\nic::Int8\nIC Change code: 0 - base case (i.e., clear the working case before adding data to it). 1 - add data to the working case.\n\nsbase::Float64\nSystem base MVA.\nrev::Union{Missing, Int64}\nPSSE revision number (if known).\nxfrrat::Union{Missing, Int8}\nUnits of transformer ratings (see Transformers). xfrrat ≤ 0 for MVA. xfrrat > 0 for current expressed as MVA.\n\nnxfrat::Union{Missing, Int8}\nUnits of ratings of non-transformer branches (refer to Non-Transformer Branch Data). nxfrat ≤ 0 for MVA. nxfrat > 0 for current expressed as MVA.\n\nbasfrq::Union{Missing, Float64}\nSystem base frequency in Hertz.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Buses","page":"API","title":"Buses","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Buses\nBuses30\nBuses33","category":"page"},{"location":"api.html#PowerFlowData.Buses","page":"API","title":"PowerFlowData.Buses","text":"abstract type Buses <: PowerFlowData.Records\n\nEach network bus to be represented in PSSE is introduced by a bus data record. The bus data record depends on the PSSE version:\n\nSee Buses30 for PSSE v30 files.\nSee Buses33 for PSSE v33 files.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.Buses30","page":"API","title":"PowerFlowData.Buses30","text":"struct Buses30 <: Buses\n\nNetwork bus data records (in PSSE v30 format).\n\nEach bus data record includes not only data for the basic bus properties but also includes information on an optionally connected shunt admittance to ground. That admittance can represent a shunt capacitor or a shunt reactor (both with or without a real component) or a shunt resistor. It must not represent line connected admittance, loads, line charging or transformer magnetizing impedance, all of which are entered in other data categories.\n\nFields\n\ni::Vector{Int32}\nBus number (1 to 999997).\nname::Vector{InlineStrings.String15}\nAlphanumeric identifier assigned to bus \"I\". The name may be up to twelve characters and must be enclosed in single quotes. NAME may contain any combination of blanks, uppercase letters, numbers and special characters, but the first character must not be a minus sign.\n\nbasekv::Vector{Float64}\nBus base voltage; entered in kV.\nide::Vector{Int8}\nBus type code: 1 - load bus or other bus without any generator boundary condition. 2 - generator or plant bus either regulating voltage or with a fixed reactive power (Mvar). A generator that reaches its reactive power limit will no longer control voltage but rather hold reactive power at its limit. 3 - swing bus or slack bus. It has no power or reactive limits and regulates voltage at a fixed reference angle. 4 - disconnected or isolated bus.\n\ngl::Vector{Float64}\nActive component of shunt admittance to ground; entered in MW at one per unit voltage. GL should not include any resistive admittance load, which is entered as part of load data.\n\nbl::Vector{Float64}\nReactive component of shunt admittance to ground; entered in Mvar at one per unit voltage. BL should not include any reactive impedance load, which is entered as part of load data; line charging and line connected shunts, which are entered as part of non-transformer branch data; or transformer magnetizing admittance, which is entered as part of transformer data. BL is positive for a capacitor, and negative for a reactor or an inductive load.\n\narea::Vector{Int16}\nArea number. 1 through the maximum number of areas at the current size level.\nzone::Vector{Int16}\nZone number. 1 through the maximum number of zones at the current size level. See Zones.\n\nvm::Vector{Float64}\nBus voltage magnitude; entered in pu.\nva::Vector{Float64}\nBus voltage phase angle; entered in degrees.\nowner::Vector{Int16}\nOwner number. 1 through the maximum number of owners at the current size level. See Owners.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.Buses33","page":"API","title":"PowerFlowData.Buses33","text":"struct Buses33 <: Buses\n\nNetwork bus data records (in PSSE v33 format).\n\nFields\n\ni::Vector{Int32}\nBus number (1 to 999997).\nname::Vector{InlineStrings.String15}\nAlphanumeric identifier assigned to bus \"I\". The name may be up to twelve characters and must be enclosed in single quotes. NAME may contain any combination of blanks, uppercase letters, numbers and special characters, but the first character must not be a minus sign.\n\nbasekv::Vector{Float64}\nBus base voltage; entered in kV.\nide::Vector{Int8}\nBus type code: 1 - load bus or other bus without any generator boundary condition. 2 - generator or plant bus either regulating voltage or with a fixed reactive power (Mvar). A generator that reaches its reactive power limit will no longer control voltage but rather hold reactive power at its limit. 3 - swing bus or slack bus. It has no power or reactive limits and regulates voltage at a fixed reference angle. 4 - disconnected or isolated bus.\n\narea::Vector{Int16}\nArea number. 1 through the maximum number of areas at the current size level.\nzone::Vector{Int16}\nZone number. 1 through the maximum number of zones at the current size level. See Zones.\n\nowner::Vector{Int16}\nOwner number. 1 through the maximum number of owners at the current size level. See Owners.\n\nvm::Vector{Float64}\nBus voltage magnitude; entered in pu.\nva::Vector{Float64}\nBus voltage phase angle; entered in degrees.\nnvhi::Vector{Float64}\nNormal voltage magnitude high limit; entered in pu. nvhi = 1.1 by default.\nnvlo::Vector{Float64}\nNormal voltage magnitude low limit, entered in pu. nvlo = 0.9 by default.\nevhi::Vector{Float64}\nEmergency voltage magnitude high limit; entered in pu. evhi = 1.1 by default.\nevlo::Vector{Float64}\nEmergency voltage magnitude low limit; entered in pu. evlo = 0.9 by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Loads","page":"API","title":"Loads","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Loads","category":"page"},{"location":"api.html#PowerFlowData.Loads","page":"API","title":"PowerFlowData.Loads","text":"struct Loads <: PowerFlowData.Records\n\nEach network bus at which a load is to be represented must be specified in at least one load data record. If multiple loads are to be represented at a bus, they must be individually identified in a load data record for the bus with a different load identifier. Each load at a bus can be a mixture of loads with different characteristics.\n\nFields\n\ni::Vector{Int32}\nBuses number, or extended buses name enclosed in single quotes.\nid::Vector{InlineStrings.String3}\nOne- or two-character uppercase non blank alphanumeric load identifier used to distinguish among multiple loads at bus \"I\". It is recommended that, at buses for which a single load is present, the load be designated as having the load identifier '1'.\n\nstatus::Vector{Bool}\nInitial load status of one for in-service and zero for out-of-service.\narea::Vector{Int16}\nArea to which the load is assigned (1 through the maximum number of areas at the current size level).\nzone::Vector{Int16}\nZone to which the load is assigned (1 through the maximum number of zones at the current size level). See Zones.\n\npl::Vector{Float64}\nActive power component of constant MVA load; entered in MW.\nql::Vector{Float64}\nReactive power component of constant MVA load; entered in Mvar.\nip::Vector{Float64}\nActive power component of constant current load; entered in MW at one per unit voltage.\niq::Vector{Float64}\nReactive power component of constant current load; entered in Mvar at one per unit voltage.\nyp::Vector{Float64}\nActive power component of constant admittance load; entered in MW at one per unit voltage.\nyq::Vector{Float64}\nReactive power component of constant admittance load; entered in Mvar at one per unit voltage. YQ is a negative quantity for an inductive load and positive for a capacitive load.\n\nowner::Vector{Int16}\nOwner to which the load is assigned. 1 through the maximum number of owners at the current size level. See Owners.\n\nscale::Vector{Union{Missing, Bool}}\nLoad scaling flag of one for a scalable load and zero for a fixed load. scale = 1 by default.\n\nintrpt::Vector{Union{Missing, Bool}}\nInterruptible load flag of one for an interruptible load for zero for a non interruptible load. intrpt=0 by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Fixed-Shunts","page":"API","title":"Fixed Shunts","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"FixedShunts","category":"page"},{"location":"api.html#PowerFlowData.FixedShunts","page":"API","title":"PowerFlowData.FixedShunts","text":"struct FixedShunts <: PowerFlowData.Records\n\nEach network bus at which fixed bus shunt is to be represented must be specified in at least one fixed bus shunt data record. Multiple fixed bus shunts may be represented at a bus by specifying more than one fixed bus shunt data record for the bus, each with a different shunt identifier.\n\nThe admittance specified in the data record can represent a shunt capacitor or a shunt reactor (both with or without a real component) or a shunt resistor. It must not represent line connected admittance, switched shunts, loads, line charging or transformer magnetizing impedance, all of which are entered in other data categories.\n\ncompat: Not present in v30 files\nv30 files do not have FixedShunts; refer to Buses and SwitchedShunts.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Generators","page":"API","title":"Generators","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Generators","category":"page"},{"location":"api.html#PowerFlowData.Generators","page":"API","title":"PowerFlowData.Generators","text":"struct Generators <: PowerFlowData.Records\n\nEach network bus to be represented as a generator or plant bus in PSS/E must be specified in a generator data record. In particular, each bus specified in the bus data input with a type code of two (2) or three (3) must have a generator data record entered for it.\n\nFields\n\ni::Vector{Int32}\nBus number, or extended bus name enclosed in single quotes.\nid::Vector{InlineStrings.String3}\nOne- or two-character uppercase non blank alphanumeric machine identifier used to distinguish among multiple machines at bus \"I\". It is recommended that, at buses for which a single machine is present, the machine be designated as having the machine identifier ’1’. ID = ’1’ by default.\n\npg::Vector{Float64}\nGenerator active power output; entered in MW. PG = 0.0 by default.\nqg::Vector{Float64}\nGenerator reactive power output; entered in Mvar. QG needs to be entered only if the case, as read in, is to be treated as a solved case. QG = 0.0 by default.\n\nqt::Vector{Float64}\nMaximum generator reactive power output; entered in Mvar. For fixed output gen- erators (i.e., nonregulating), QT must be equal to the fixed Mvar output. QT = 9999.0 by default.\n\nqb::Vector{Float64}\nMinimum generator reactive power output; entered in Mvar. For fixed output generators, QB must be equal to the fixed Mvar output. QB = -9999.0 by default.\n\nvs::Vector{Float64}\nRegulated voltage setpoint; entered in pu. VS = 1.0 by default.\nireg::Vector{Int32}\nBus number, or extended bus name enclosed in single quotes, of a remote type 1 or 2 bus whose voltage is to be regulated by this plant to the value specified by VS. If bus IREG is other than a type 1 or 2 bus, bus \"I\" regulates its own voltage to the value specified by VS. IREG is entered as zero if the plant is to regulate its own voltage and must be zero for a type three (swing) bus. IREG = 0 by default.\n\nmbase::Vector{Float64}\nTotal MVA base of the units represented by this machine; entered in MVA. This quantity is not needed in normal power flow and equivalent onstruction work, but is required for switching studies, fault analysis, and dynamic simulation. MBASE = system base MVA by default.\n\nzr::Vector{Float64}\nComplex machine impedance, ZSORCE; entered in pu on MBASE base. This data is not needed in normal power flow and equivalent construction work, but is required for switching studies, fault analysis, and dynamic simulation. For dynamic simulation, this impedance must be set equal to the unsaturated subtransient impedance for those generators to be modeled by subtransient level machine models, and to unsaturated transient impedance for those to be modeled by classical or transient level models. For short-circuit studies, the saturated subtransient or transient impedance should be used. ZR = 0.0 by default.\n\nzx::Vector{Float64}\nSee zr. ZX = 1.0 by default.\nrt::Vector{Float64}\nStep-up transformer impedance, XTRAN; entered in pu on MBASE base. XTRAN should be entered as zero if the step-up transformer is explicitly modeled as a network branch and bus \"I\" is the terminal bus. RT+jXT = 0.0 by default.\n\nxt::Vector{Float64}\nSee rt. RT+jXT = 0.0 by default.\ngtap::Vector{Float64}\nStep-up transformer off-nominal turns ratio; entered in pu. GTAP is used only if XTRAN is nonzero. GTAP = 1.0 by default.\n\nstat::Vector{Bool}\nInitial machine status of one for in-service and zero for out-of-service. STAT = 1 by default.\n\nrmpct::Vector{Float64}\nPercent of the total Mvar required to hold the voltage at the bus controlled by this bus \"I\" that are to be contributed by the generation at bus \"I\"; RMPCT must be positive. RMPCT is needed if IREG specifies a valid remote bus and there is more than one local or remote voltage controlling device (plant, switched shunt, FACTS device shunt element, or VSC DC line converter) controlling the voltage at bus IREG to a setpoint. RMPCT is needed also if bus \"I\" itself is being controlled locally or remotely by one or more other setpoint mode voltage controlling devices. RMPCT = 100.0 by default.\n\npt::Vector{Float64}\nMaximum generator active power output; entered in MW. PT = 9999.0 by default.\npb::Vector{Float64}\nMinimum generator active power output; entered in MW. PB = -9999.0 by default.\no1::Vector{Int16}\nOwner number (1 through the maximum number of owners at the current size level). Each machine may have up to four owners. See Owners. By default, o1 is the owner to which bus i is assigned and o2, o3, and o4 are zero.\n\nf1::Vector{Union{Missing, Float64}}\nFraction of total ownership assigned to owner oi; each fi must be positive. The fi values are normalized such that they sum to 1.0 before they are placed in the working case. By default, each fi is 1.0.\n\no2::Vector{Union{Missing, Int16}}\nf2::Vector{Union{Missing, Float64}}\no3::Vector{Union{Missing, Int16}}\nf3::Vector{Union{Missing, Float64}}\no4::Vector{Union{Missing, Int16}}\nf4::Vector{Union{Missing, Float64}}\nwmod::Vector{Union{Missing, Int8}}\nWind machine control mode; wmod is used to indicate whether a machine is a wind machine, and, if it is, the type of reactive power limits to be imposed.\n0 for a machine that is not a wind machine.\n1 for a wind machine for which reactive power limits are specified by QT and QB.\n2 for a wind machine for which reactive power limits are determined from the machine’s active power output and wpf; limits are of equal magnitude and opposite sign.\n3 for a wind machine with a fixed reactive power setting determined from the machine’s active power output and wpf; when wpf is positive, the machine’s reactive power has the same sign as its active power; when wpf is negative, the machine’s reactive power has the opposite sign of its active power.\nwmod = 0 by default.\n\nwpf::Vector{Union{Missing, Float64}}\nPower factor used in calculating reactive power limits or output when wmod is 2 or 3. wpf = 1.0 by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Branches","page":"API","title":"Branches","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Branches\nBranches30\nBranches33","category":"page"},{"location":"api.html#PowerFlowData.Branches","page":"API","title":"PowerFlowData.Branches","text":"abstract type Branches <: PowerFlowData.Records\n\nThe branches data record depends on the PSSE version:\n\nSee Branches30 for PSSE v30 files.\nSee Branches33 for PSSE v33 files.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.Branches30","page":"API","title":"PowerFlowData.Branches30","text":"struct Branches30 <: Branches\n\nIn PSS/E, the basic transmission line model is an Equivalent Pi connected between network buses.\n\nData for shunt equipment units, such as reactors, which are connected to and switched with the line, are entered in the same data record.\n\ncompat: Shunts connected to buses\nIn PSSE v30, to represent shunts connected to buses, that shunt data should be entered in the Buses data records.\n\nnote: Transformers\nBranches to be modeled as transformers are not specified in this data category; rather, they are specified in the Transformers data category.\n\nFields\n\ni::Vector{Int32}\nBranch \"from bus\" number, or extended bus name enclosed in single quotes.\nj::Vector{Int32}\nBranch \"to bus\" number, or extended bus name enclosed in single quotes. \"J\" is entered as a negative number, or with a minus sign before the first character of the extended bus name, to designate it as the metered end; otherwise, bus \"I\" is assumed to be the metered end.\n\nckt::Vector{InlineStrings.String3}\nOne- or two-character uppercase nonblank alphanumeric branch circuit identifier; the first character of CKT must not be an ampersand \"&\". It is recommended that single circuit branches be designated as having the circuit identifier '1'. CKT = '1' by default.\n\nr::Vector{Float64}\nBranch resistance; entered in pu. A value of R must be entered for each branch.\nx::Vector{Float64}\nBranch reactance; entered in pu. A nonzero value of X must be entered for each branch.\nb::Vector{Float64}\nTotal branch charging susceptance; entered in pu. B = 0.0 by default.\nrate_a::Vector{Float64}\nFirst loading rating; entered in MVA. If RATEA is set to 0.0, the default value, this branch will not be included in any examination of circuit loading.\nRatings are entered as: MVA_rated = sqrt(3)  E_base  I_rated  10^-6 where:\nE_base is the base line-to-line voltage in volts of the buses to which the terminal of the branch is connected.\nI_rated is the branch rated phase current in amperes.\n\nrate_b::Vector{Float64}\nSecond loading rating; entered in MVA. RATEB = 0.0 by default.\nrate_c::Vector{Float64}\nThird loading rating; entered in MVA. RATEC = 0.0 by default.\ngi::Vector{Float64}\nComplex admittance of the line shunt at the bus \"I\" end of the branch; entered in pu. BI is negative for a line connected reactor and positive for line connected capacitor. GI + jBI = 0.0 by default.\n\nbi::Vector{Float64}\nComplex admittance of the line shunt at the bus \"I\" end of the branch; entered in pu. BI is negative for a line connected reactor and positive for line connected capacitor. GI + jBI = 0.0 by default.\n\ngj::Vector{Float64}\nComplex admittance of the line shunt at the bus \"J\" end of the branch; entered in pu. BJ is negative for a line connected reactor and positive for line connected capacitor. GJ + jBJ = 0.0 by default.\n\nbj::Vector{Float64}\nComplex admittance of the line shunt at the bus \"J\" end of the branch; entered in pu. BJ is negative for a line connected reactor and positive for line connected capacitor. GJ + jBJ = 0.0 by default.\n\nst::Vector{Bool}\nInitial branch status where 1 designates in-service and 0 designates out-of-service. ST = 1 by default.\n\nlen::Vector{Float64}\nLine length; entered in user-selected units. LEN = 0.0 by default.\no1::Vector{Int16}\nOwner number; 1 through the maximum number of owners at the current size level. Each branch may have up to four owners. See Owners. By default, o1 is the owner to which bus i is assigned and o2, o3, and o4 are zero.\n\nf1::Vector{Float64}\nFraction of total ownership assigned to owner O_i; each F_i must be positive. The `fi values are normalized such that they sum to 1.0 before they are placed in the working case. By default, each fi is 1.0.\n\no2::Vector{Union{Missing, Int16}}\nf2::Vector{Union{Missing, Float64}}\no3::Vector{Union{Missing, Int16}}\nf3::Vector{Union{Missing, Float64}}\no4::Vector{Union{Missing, Int16}}\nf4::Vector{Union{Missing, Float64}}\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.Branches33","page":"API","title":"PowerFlowData.Branches33","text":"struct Branches33 <: Branches\n\nIn PSS/E, the basic transmission line model is an Equivalent Pi connected between network buses.\n\nData for shunt equipment units, such as reactors, which are connected to and switched with the line, are entered in the same data record.\n\ncompat: Shunts connected to buses\nIn PSSE v33, to represent shunts connected to buses, that shunt data should be entered in FixedShunts and/or SwitchedShunts data records.\n\nnote: Transformers\nBranches to be modeled as transformers are not specified in this data category; rather, they are specified in the Transformers data category.\n\nFields\n\ni::Vector{Int32}\nBranch \"from bus\" number, or extended bus name enclosed in single quotes.\nj::Vector{Int32}\nBranch \"to bus\" number, or extended bus name enclosed in single quotes. \"J\" is entered as a negative number, or with a minus sign before the first character of the extended bus name, to designate it as the metered end; otherwise, bus \"I\" is assumed to be the metered end.\n\nckt::Vector{InlineStrings.String3}\nOne- or two-character uppercase nonblank alphanumeric branch circuit identifier; the first character of CKT must not be an ampersand \"&\". It is recommended that single circuit branches be designated as having the circuit identifier '1'. CKT = '1' by default.\n\nr::Vector{Float64}\nBranch resistance; entered in pu. A value of R must be entered for each branch.\nx::Vector{Float64}\nBranch reactance; entered in pu. A nonzero value of X must be entered for each branch.\nb::Vector{Float64}\nTotal branch charging susceptance; entered in pu. B = 0.0 by default.\nrate_a::Vector{Float64}\nFirst loading rating; entered in MVA. If RATEA is set to 0.0, the default value, this branch will not be included in any examination of circuit loading.\nRatings are entered as: MVA_rated = sqrt(3)  E_base  I_rated  10^-6 where:\nE_base is the base line-to-line voltage in volts of the buses to which the terminal of the branch is connected.\nI_rated is the branch rated phase current in amperes.\n\nrate_b::Vector{Float64}\nSecond loading rating; entered in MVA. RATEB = 0.0 by default.\nrate_c::Vector{Float64}\nThird loading rating; entered in MVA. RATEC = 0.0 by default.\ngi::Vector{Float64}\nComplex admittance of the line shunt at the bus \"I\" end of the branch; entered in pu. BI is negative for a line connected reactor and positive for line connected capacitor. GI + jBI = 0.0 by default.\n\nbi::Vector{Float64}\nComplex admittance of the line shunt at the bus \"I\" end of the branch; entered in pu. BI is negative for a line connected reactor and positive for line connected capacitor. GI + jBI = 0.0 by default.\n\ngj::Vector{Float64}\nComplex admittance of the line shunt at the bus \"J\" end of the branch; entered in pu. BJ is negative for a line connected reactor and positive for line connected capacitor. GJ + jBJ = 0.0 by default.\n\nbj::Vector{Float64}\nComplex admittance of the line shunt at the bus \"J\" end of the branch; entered in pu. BJ is negative for a line connected reactor and positive for line connected capacitor. GJ + jBJ = 0.0 by default.\n\nst::Vector{Bool}\nInitial branch status where 1 designates in-service and 0 designates out-of-service. ST = 1 by default.\n\nmet::Vector{Int8}\nMetered end flag.\n≤1 to designate bus i as the metered end.\n≥2 to designate bus j as the metered end.\nmet = 1 by default.\n\nlen::Vector{Float64}\nLine length; entered in user-selected units. LEN = 0.0 by default.\no1::Vector{Int16}\nOwner number; 1 through the maximum number of owners at the current size level. Each branch may have up to four owners. See Owners. By default, o1 is the owner to which bus i is assigned and o2, o3, and o4 are zero.\n\nf1::Vector{Float64}\nFraction of total ownership assigned to owner O_i; each F_i must be positive. The `fi values are normalized such that they sum to 1.0 before they are placed in the working case. By default, each fi is 1.0.\n\no2::Vector{Union{Missing, Int16}}\nf2::Vector{Union{Missing, Float64}}\no3::Vector{Union{Missing, Int16}}\nf3::Vector{Union{Missing, Float64}}\no4::Vector{Union{Missing, Int16}}\nf4::Vector{Union{Missing, Float64}}\n\n\n\n\n\n","category":"type"},{"location":"api.html#Transformers","page":"API","title":"Transformers","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Transformers","category":"page"},{"location":"api.html#PowerFlowData.Transformers","page":"API","title":"PowerFlowData.Transformers","text":"struct Transformers <: PowerFlowData.Records\n\nEach AC transformer to be represented in PSS/E is introduced through transformer data records that specify all the data required to model transformers in power flow calculations, with one exception.\n\nThat exception is a set of ancillary data, comprising transformer impedance correction records, which define the manner in which transformer impedance changes as off-nominal turns ratio or phase shift angle is adjusted. Those data records are described in Transformer Impedance Correction Records, ImpedanceCorrections.\n\nBoth two-winding and three-winding transformers are specified in the transformer data records. The data records for the two-winding transformer are common to the three-winding transformer; the data block for two-winding transformers is a subset of the data required for three-winding transformers.\n\nFields\n\ni::Vector{Int32}\nThe bus number, or extended bus name enclosed in single quotes, of the bus to which the first winding is connected. The transformer’s magnetizing admittance is modeled on winding one. The first winding is the only winding of a two-winding transformer whose tap ratio or phase shift angle may be adjusted by the power flow solution activities; any winding(s) of a three-winding transformer may be adjusted. No default is allowed.\n\nj::Vector{Int32}\nThe bus number, or extended bus name enclosed in single quotes, of the bus to which the second winding is connected. This winding may have a fixed, off-nominal tap ratio assigned to it. No default is allowed.\n\nk::Vector{Int32}\nThe bus number, or extended bus name enclosed in single quotes, of the bus to which the third winding is connected. Zero is used to indicate that no third winding is present. Always equal to zero for a two-winding transformer.\n\nckt::Vector{InlineStrings.String3}\nOne- or two-character uppercase nonblank alphanumeric transformer circuit identifier; the first character of ckt must not be an ampersand ('&').\n\ncw::Vector{Int8}\nThe winding data I/O code which defines the units in which the turns ratios windv1 and windv2 are specified (the units of rma1 and rmi1 are also governed by cw when |cod1| is 1 or 2):\n1 for off-nominal turns ratio in pu of winding bus base voltage;\n2 for winding voltage in kV.\ncw = 1 by default.\n\ncz::Vector{Int8}\nThe impedance data I/O code that defines the units in which the winding impedances r1_2 and x1_2 are specified:\n1 for resistance and reactance in pu on system base quantities;\n2 for resistance and reactance in pu on a specified base MVA and winding bus base voltage;\n3 for transformer load loss in watts and impedance magnitude in pu on a specified base MVA and winding bus base voltage.\ncz = 1 by default.\n\ncm::Vector{Int8}\nThe magnetizing admittance I/O code that defines the units in which mag1 and mag2 are specified:\n1 for complex admittance in pu on system base quantities;\n2 for no load loss in watts and exciting current in pu on winding one to two base MVA and nominal voltage.\ncm = 1 by default.\n\nmag1::Vector{Float64}\nWhen cm is 1, mag1 is the magnetizing conductance in pu on system base quantities; when cm is 2, mag1 is the no load loss in watts. mag1 = 0.0 by default.\n\nmag2::Vector{Float64}\nWhen cm is 1, mag2 is the magnetizing susceptance in pu on system base quantities; when cm is 2, mag2 is the exciting current in pu on winding one to two base MVA (sbase1_2) and nominal voltage (nomv1). mag2 = 0.0 by default.\n\nnmetr::Vector{Int8}\nThe nonmetered end code of either:\n1 (for the winding one bus), or\n2 (for the winding two bus).\nnmetr = 2 by default.\n\nname::Vector{InlineStrings.String15}\nAn alphanumeric identifier assigned to the transformer. The name may be up to twelve characters. name may contain any combination of blanks, uppercase letters, numbers and special characters. name is twelve blanks by default.\n\nstat::Vector{Bool}\nThe initial transformer status, where 1 designates in-service and 0 designates out-of-service. stat = 1 by default.\n\no1::Vector{Int16}\nAn owner number; (1 through the maximum number of owners at the current size level). Each transformer may have up to four owners. See Owners. By default, O1 is the owner to which bus \"I\" is assigned\n\nf1::Vector{Float64}\nThe fraction of total ownership assigned to owner Oi; each Fi must be positive. The Fi values are normalized such that they sum to 1.0 before they are placed in the working case. By default, each fi is 1.0.\n\no2::Vector{Union{Missing, Int16}}\nf2::Vector{Union{Missing, Float64}}\no3::Vector{Union{Missing, Int16}}\nf3::Vector{Union{Missing, Float64}}\no4::Vector{Union{Missing, Int16}}\nf4::Vector{Union{Missing, Float64}}\nvecgrp::Vector{Union{Missing, InlineStrings.String15}}\nAlphanumeric identifier specifying vector group based on transformer winding connections and phase angles. vecgrp value is used for information purpose only. vecgrp is 12 blanks by default.\n\nr1_2::Vector{Float64}\nThe measured impedance of the transformer between the buses to which its first and second windings are connected (see also x1_2).\nWhen cz is 1, r1_2 is the resistance in pu on system base quantities;\nwhen cz is 2, r1_2 is the resistance in pu on winding one to two base MVA (sbase1_2) and winding one bus base voltage;\nwhen cz is 3, r1_2 is the load loss in watts.\nr1_2 = 0.0  by default.\n\nx1_2::Vector{Float64}\nThe measured impedance of the transformer between the buses to which its first and second windings are connected (see also r1_2).\nWhen cz is 1, x1_2 is the reactance in pu on system base quantities;\nwhen cz is 2, x1_2 is the reactance in pu on winding one to two base MVA (sbase1_2) and winding one bus base voltage;\nwhen cz is 3, x1_2 is the impedance magnitude in pu on winding one to two base MVA (sbase1_2) and winding one bus base voltage.\nx1_2 has no default.\n\nsbase1_2::Vector{Float64}\nThe winding one to two base MVA of the transformer. sbase1_2 = sbase (the system base MVA) by default.\n\nr2_3::Vector{Union{Missing, Float64}}\nThe measured impedance of a three-winding transformer between the buses to which its second and third windings are connected (see also x2_3).\nWhen cz is 1, r2_3 is the resistance in pu on system base quantities;\nwhen cz is 2, r2_3 is the resistance in pu on winding two to three base MVA (sbase2_3) and winding two bus base voltage;\nwhen cz is 3, r2_3 is the load loss in watts\nr2_3 = 0.0 by default. Ignored for a two-winding transformer.\n\nx2_3::Vector{Union{Missing, Float64}}\nThe measured impedance of a three-winding transformer between the buses to which its second and third windings are connected (see also x2_3).\nWhen cz is 1, x2_3 is the reactance in pu on system base quantities;\nwhen cz is 2, x2_3 is the reactance in pu on winding one to two base MVA (sbas2_3) and winding one bus base voltage;\nwhen cz is 3, x2_3 is the impedance magnitude in pu on winding two to three base MVA (sbase2_3) and winding two bus base voltage.\nx2_3 has no default. Ignored for a two-winding transformer.\n\nsbase2_3::Vector{Union{Missing, Float64}}\nThe winding two to three base MVA of a three-winding transformer; ignored for a two-winding transformer. sbase2_3 = sbase (the system base MVA) by default. Ignored for a two-winding transformer.\n\nr3_1::Vector{Union{Missing, Float64}}\nThe measured impedance of a three-winding transformer between the buses to which its third and first windings are connected (see also x3_1).\nWhen cz is 1, r3_1 is the resistance in pu on system base quantities;\nwhen cz is 2, r3_1 is the resistance in pu on winding three to one base MVA (sbase3_1) and winding three bus base voltage;\nwhen cz is 3, r3_1 is the load loss in watts\nr3_1 = 0.0 by default. Ignored for a two-winding transformer.\n\nx3_1::Vector{Union{Missing, Float64}}\nThe measured impedance of a three-winding transformer between the buses to which its third and first windings are connected (see also x3_1).\nWhen cz is 1, x3_1 is the reactance in pu on system base quantities;\nwhen cz is 2, x3_1 is the reactance in pu on winding three to one base MVA (sbas3_1) and winding three bus base voltage;\nwhen cz is 3, x3_1 is the impedance magnitude in pu on winding three to one base MVA (sbase3_1) and winding three bus base voltage.\nx3_1 has no default. Ignored for a two-winding transformer.\n\nsbase3_1::Vector{Union{Missing, Float64}}\nThe winding three to one base MVA of a three-winding transformer. sbase3_1 = sbase (the system base MVA) by default. Ignored for a two-winding transformer.\n\nvmstar::Vector{Union{Missing, Float64}}\nThe voltage magnitude at the hidden star point bus; entered in pu. vmstar = 1.0 by default. Ignored for a two-winding transformer.\n\nanstar::Vector{Union{Missing, Float64}}\nThe bus voltage phase angle at the hidden star point bus; entered in degrees. anstar = 0.0 by default. Ignored for a two-winding transformer.\n\nwindv1::Vector{Float64}\nWhen cw is 1, windv1 is the winding one off-nominal turns ratio in pu of winding one bus base voltage, and windv1 = 1.0 by default. When cw is 2, windv1 is the actual winding one voltage in kV, and windv1 is equal to the base voltage of bus \"I\" by default.\n\nnomv1::Vector{Float64}\nThe nominal (rated) winding one voltage in kV, or zero to indicate that nominal winding one voltage is to be taken as the base voltage of bus \"I\". nomv1 is used only in converting magnetizing data between per unit admittance values and physical units when cm is 2. nomv1 = 0.0 by default.\n\nang1::Vector{Float64}\nThe winding one phase shift angle in degrees. ang1 is positive for a positive phase shift from the winding one side to the winding two side (for a two-winding transformer). ang1 must be greater than -180.0 and less than or equal to +180.0. ang1 = 0.0 by default.\n\nrata1::Vector{Float64}\nThe first winding’s first rating entered in MVA (not current expressed in MVA).\n\nratb1::Vector{Float64}\nThe first winding’s second rating entered in MVA (not current expressed in MVA).\n\nratc1::Vector{Float64}\nThe first winding’s third rating entered in MVA (not current expressed in MVA).\n\ncod1::Vector{Int8}\nThe transformer control mode for automatic adjustments of the winding one tap or phase shift angle during power flow solutions:\n0 for no control (fixed tap and phase shift);\n±1 for voltage control;\n±2 for reactive power flow control;\n±3 for active power flow control;\n±4 for control of a DC line quantity.\nIf the control mode is entered as a positive number, automatic adjustment of this transformer winding is enabled when the corresponding adjustment is activated during power flow solutions; a negative control mode suppresses the automatic adjustment of this transformer winding. cod1 = 0 by default.\n\ncont1::Vector{Int32}\nThe bus number, or extended bus name enclosed in single quotes, of the bus whose voltage is to be controlled by the transformer turns ratio adjustment option of the power flow solution activities when cod1 is 1.\ncont1 should be non-zero only for voltage controlling transformer windings. cont1 may specify a bus other than \"I\", \"J\", or \"K\"; in this case, the sign of cont1 defines the location of the controlled bus relative to the transformer winding.\nIf cont1 is entered as a positive number, the ratio is adjusted as if bus cont1 is on the winding two side of the transformer; if cont1 is entered as a negative number, the ratio is adjusted as if bus |cont1| is on the winding one side of the transformer. cont1 = 0 by default.\n\nrma1::Vector{Float64}\nrma1 is the upper limit (and rmi1 the lower limit) of either:\nOff-nominal turns ratio in pu of winding one bus base voltage when |cod1| is 1 or 2 and cw is 1; rma1 = 1.1 and rmi1 = 0.9 by default.\nActual winding one voltage in kV when |cod1| is 1 or 2 and cw is 2. No default is allowed.\nPhase shift angl e in degrees when |cod1| is 3. No default is allowed.\nNot used when |cod1| is 0 or 4;\nrma1 = 1.1 and rmi1 = 0.9 by default.\n\nrmi1::Vector{Float64}\nThe lower limit to rma1's upper limit. See rma1 for details.\nvma1::Vector{Float64}\nvma1 is the upper limit (and vmi1 the lower limit) of either:\nVoltage at the controlled bus (bus |cont1|) in pu when |cod1| is 1. vma1 = 1.1 and vmi1 = 0.9 by default.\nReactive power flow into the transformer at the winding one bus end in Mvar when |cod1| is 2. no default is allowed.\nActive power flow into the transformer at the winding one bus end in MW when |cod1| is 3. no default is allowed.\nNot used when |cod1| is 0 or 4; vma1 = 1.1 and vmi1 = 0.9 by default.\n\nvmi1::Vector{Float64}\nThe lower limit to vma1's upper limit. See vma1 for details.\nntp1::Vector{Int16}\nThe number of tap positions available; used when cod1 is 1 or 2. ntp1 must be between 2 and 9999. ntp1 = 33 by default.\n\ntab1::Vector{Int64}\nThe number of a transformer impedance correction record if this transformer winding’s impedance is to be a function of either off-nominal turns ratio or phase shift angle, or 0 if no transformer impedance correction is to be applied to this transformer winding. See ImpedanceCorrections. tab1 = 0 by default.\n\ncr1::Vector{Float64}\nThe load drop compensation impedance for voltage controlling transformers entered in pu on system base quantities; used when cod1 is 1. cr1 + jcx1 = 0.0 by default.\n\ncx1::Vector{Float64}\nSee cr1 for details.\ncnxa1::Vector{Union{Missing, Float64}}\nWinding connection angle in degrees; used when cod1 is 5. There are no restrictions on the value specified for cnxa1; if it is outside of the range from -90.0 to +90.0, cnxa1 is normalized to within this range. cnxa1 = 0.0 by default.\n\nwindv2::Vector{Float64}\nWhen cw is 1, windv2 is the winding two off-nominal turns ratio in pu of winding two bus base voltage, and windv2 = 1.0 by default. When cw is 2, windv2 is the actual winding two voltage in kV, and windv2 is equal to the base voltage of bus j by default.\n\nnomv2::Vector{Float64}\nThe nominal (rated) winding two voltage in kV, or zero to indicate that nominal winding two voltage is to be taken as the base voltage of bus j. nomv2 is present for information purposes only; it is not used in any of the calculations for modeling the transformer. nomv2 = 0.0 by default.\n\nang2::Vector{Union{Missing, Float64}}\nThe winding two phase shift angle in degrees. ang2 is positive for a positive phase shift from the winding two side to the \"T\" (or star) point bus. ang2 must be greater than -180.0 and less than or equal to +180.0. ang2 = 0.0 by default. Ignored for a two-winding transformer.\n\nrata2::Vector{Union{Missing, Float64}}\nThe second winding’s first rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\nratb2::Vector{Union{Missing, Float64}}\nThe second winding’s second rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\nratc2::Vector{Union{Missing, Float64}}\nThe second winding’s third rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\ncod2::Vector{Union{Missing, Int8}}\nThe transformer control mode for automatic adjustments of the winding two tap or phase shift angle during power flow solutions:\n0 for no control (fixed tap and phase shift);\n±1 for voltage control;\n±2 for reactive power flow control;\n±3 for active power flow control.\nIf the control mode is entered as a positive number, automatic adjustment of this transformer winding is enabled when the corresponding adjustment is activated during power flow solutions; a negative control mode suppresses the automatic adjustment of this transformer winding. cod2 = 0 by default. Ignored for a two-winding transformer.\n\ncont2::Vector{Union{Missing, Int32}}\nThe bus number, or extended bus name enclosed in single quotes, of the bus whose voltage is to be controlled by the transformer turns ratio adjustment option of the power flow solution activities when cod2 is 1. cont2 should be nonzero only for voltage controlling transformer windings.\ncont2 may specify a bus other than i, j, or k; in this case, the sign of cont2 defines the location of the controlled bus relative to the transformer winding. If cont2 is entered as a positive number, or a quoted extended bus name, the ratio is adjusted as if bus cont2 is on the winding one or winding three side of the transformer; if cont2 is entered as a negative number, or a quoted extended bus name with a minus sign preceding the first character, the ratio is adjusted as if bus |cont2| is on the winding two side of the transformer. cont2 = 0 by default. Ignored for a two-winding transformer.\n\nrma2::Vector{Union{Missing, Float64}}\nrma2 is the upper limit (and rmi2 the lower limit) of either:\nOff-nominal turns ratio in pu of winding two bus base voltage when |cod2| is 1 or 2 and cw is 1;   rma2 = 1.1 and rmi2 = 0.9 by default.\nActual winding one voltage in kV when |cod2| is 1 or 2 and cw is 2. No default is allowed.\nPhase shift angle in degrees when |cod2| is 3. No default is allowed.\nNot used when |cod2| is 0;\nrma2 = 1.1 and rmi2 = 0.9 by default. Ignored for a two-winding transformer.\n\nrmi2::Vector{Union{Missing, Float64}}\nThe lower limit to rma2's upper limit. See rma2 for details. Ignored for a two-winding transformer.\n\nvma2::Vector{Union{Missing, Float64}}\nvma2 is the upper limit (and vmi2 the lower limit) of either:\nVoltage at the controlled bus (bus |cont2|) in pu when |cod2| is 1.   vma2 = 1.1 and vmi2 = 0.9 by default.\nReactive power flow into the transformer at the winding two bus end in Mvar when |cod2| is 2.   No default is allowed.\nActive power flow into the transformer at the winding two bus end in MW when |cod2| is 3.   No default is allowed.\nNot used when |cod2| is 0; vma2 = 1.1 and vmi2 = 0.9 by default.\nIgnored for a two-winding transformer.\n\nvmi2::Vector{Union{Missing, Float64}}\nThe lower limit to vma1's upper limit. See vma1 for details. Ignored for a two-winding transformer.\n\nntp2::Vector{Union{Missing, Int16}}\nThe number of tap positions available; used when cod2 is 1 or 2. ntp2 must be between 2 and 9999. ntp2 = 33 by default. Ignored for a two-winding transformer.\n\ntab2::Vector{Union{Missing, Int64}}\nThe number of a transformer impedance correction record if this transformer winding’s impedance is to be a function of either off-nominal turns ratio or phase shift angle, or 0 if no transformer impedance correction is to be applied to this transformer winding. See ImpedanceCorrections. tab2 = 0 by default. Ignored for a two-winding transformer.\n\ncr2::Vector{Union{Missing, Float64}}\nThe load drop compensation impedance for voltage controlling transformers entered in pu on system base quantities; used when cod2 is 1. cr2 + jcx2 = 0.0 by default. Ignored for a two-winding transformer.\n\ncx2::Vector{Union{Missing, Float64}}\nSee cr2 for details. Ignored for a two-winding transformer.\n\ncnxa2::Vector{Union{Missing, Float64}}\nWinding connection angle in degrees; used when cod2 is 5. There are no restrictions on the value specified for cnxa2; if it is outside of the range from -90.0 to +90.0, cnxa2 is normalized to within this range. cnxa2 = 0.0 by default.\n\nwindv3::Vector{Union{Missing, Float64}}\nWhen cw is 1, windv3 is the winding three off-nominal turns ratio in pu of winding three bus base voltage, and windv3 = 1.0 by default. When cw is 2, windv3 is the actual winding three voltage in kV, and windv3 is equal to the base voltage of bus k by default. Ignored for a two-winding transformer.\n\nnomv3::Vector{Union{Missing, Float64}}\nThe nominal (rated) winding three voltage in kV, or zero to indicate that nominal winding two voltage is to be taken as the base voltage of bus j. nomv3 is present for information purposes only; it is not used in any of the calculations for modeling the transformer. nomv3 = 0.0 by default. Ignored for a two-winding transformer.\n\nang3::Vector{Union{Missing, Float64}}\nThe winding three phase shift angle in degrees. ang3 is positive for a positive phase shift from the winding two side to the \"T\" (or star) point bus. ang3 must be greater than -180.0 and less than or equal to +180.0. ang3 = 0.0 by default. Ignored for a two-winding transformer.\n\nrata3::Vector{Union{Missing, Float64}}\nThe third winding’s first rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\nratb3::Vector{Union{Missing, Float64}}\nThe third winding’s second rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\nratc3::Vector{Union{Missing, Float64}}\nThe third winding’s third rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\ncod3::Vector{Union{Missing, Int8}}\nThe transformer control mode for automatic adjustments of the winding three tap or phase shift angle during power flow solutions:\n0 for no control (fixed tap and phase shift);\n±1 for voltage control;\n±2 for reactive power flow control;\n±3 for active power flow control.\nIf the control mode is entered as a positive number, automatic adjustment of this transformer winding is enabled when the corresponding adjustment is activated during power flow solutions; a negative control mode suppresses the automatic adjustment of this transformer winding. cod3 = 0 by default. Ignored for a two-winding transformer.\n\ncont3::Vector{Union{Missing, Int32}}\nThe bus number, or extended bus name enclosed in single quotes, of the bus whose voltage is to be controlled by the transformer turns ratio adjustment option of the power flow solution activities when cod3 is 1. cont3 should be nonzero only for voltage controlling transformer windings.\ncont3 may specify a bus other than i, j, or k; in this case, the sign of cont3 defines the location of the controlled bus relative to the transformer winding. If cont3 is entered as a positive number, or a quoted extended bus name, the ratio is adjusted as if bus cont3 is on the winding one or winding two side of the transformer; if cont3 is entered as a negative number, or a quoted extended bus name with a minus sign preceding the first character, the ratio is adjusted as if bus |cont3| is on the winding three side of the transformer. cont3 = 0 by default. Ignored for a two-winding transformer.\n\nrma3::Vector{Union{Missing, Float64}}\nrma3 is the upper limit (and rmi3 the lower limit) of either:\nOff-nominal turns ratio in pu of winding three bus base voltage when |cod3| is 1 or 2 and cw is 1; rma3 = 1.1 and rmi3 = 0.9 by default.\nActual winding one voltage in kV when |cod3| is 1 or 2 and cw is 2. No default is allowed.\nPhase shift angle in degrees when |cod3| is 3. No default is allowed.\nNot used when |cod3| is 0;\nrma3 = 1.1 and rmi3 = 0.9 by default. Ignored for a two-winding transformer.\n\nrmi3::Vector{Union{Missing, Float64}}\nThe lower limit to rma3's upper limit. See rma3 for details. Ignored for a two-winding transformer.\n\nvma3::Vector{Union{Missing, Float64}}\nvma3 is the upper limit (and vmi3 the lower limit) of either:\nVoltage at the controlled bus (bus |cont3|) in pu when |cod3| is 1. vma3 = 1.1 and vmi3 = 0.9 by default.\nReactive power flow into the transformer at the winding three bus end in Mvar when |cod3| is 2. No default is allowed.\nActive power flow into the transformer at the winding two bus end in MW when |cod3| is 3. No default is allowed.\nNot used when |cod3| is 0; vma3 = 1.1 and vmi3 = 0.9 by default.\nIgnored for a two-winding transformer.\n\nvmi3::Vector{Union{Missing, Float64}}\nThe lower limit to vma3's upper limit. See vma3 for details. Ignored for a two-winding transformer.\n\nntp3::Vector{Union{Missing, Int16}}\nThe number of tap positions available; used when cod3 is 1 or 2. ntp3 must be between 2 and 9999. ntp3 = 33 by default. Ignored for a two-winding transformer.\n\ntab3::Vector{Union{Missing, Int64}}\nThe number of a transformer impedance correction record if this transformer winding’s impedance is to be a function of either off-nominal turns ratio or phase shift angle, or 0 if no transformer impedance correction is to be applied to this transformer winding. See ImpedanceCorrections. tab3 = 0 by default. Ignored for a two-winding transformer.\n\ncr3::Vector{Union{Missing, Float64}}\nThe load drop compensation impedance for voltage controlling transformers entered in pu on system base quantities; used when cod3 is 1. cr3 + jcx3 = 0.0 by default. Ignored for a two-winding transformer.\n\ncx3::Vector{Union{Missing, Float64}}\nSee cr3 for details. Ignored for a two-winding transformer.\n\ncnxa3::Vector{Union{Missing, Float64}}\nWinding connection angle in degrees; used when cod3 is 5. There are no restrictions on the value specified for cnxa3; if it is outside of the range from -90.0 to +90.0, cnxa3 is normalized to within this range. cnxa3 = 0.0 by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Area-Interchanges","page":"API","title":"Area Interchanges","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"AreaInterchanges","category":"page"},{"location":"api.html#PowerFlowData.AreaInterchanges","page":"API","title":"PowerFlowData.AreaInterchanges","text":"struct AreaInterchanges <: PowerFlowData.Records\n\nArea interchange is a required net export of power from, or net import of power to, a specific area. This does not imply that the power is destined to be transferred to or from any other specific area. To specify transfers between specific pairs of areas see InterAreaTransfers.\n\nFields\n\ni::Vector{Int16}\nArea number (1 through the maximum number of areas at the current size level)\n\nisw::Vector{Int32}\nBus number, or extended bus name enclosed in single quotes, of the area slack bus for area interchange control. The bus must be a generator (type two) bus in the specified area. Any area containing a system swing bus (type three) must have either that swing bus or a bus number of zero specified for its area slack bus number. isw = 0 by default.\n\npdes::Vector{Float64}\nDesired net interchange leaving the area (export); entered in MW. pdes = 0.0 by default.\n\nptol::Vector{Float64}\nInterchange tolerance bandwidth; entered in MW. ptol = 10.0 by default.\n\narname::Vector{InlineStrings.String15}\nAlphanumeric identifier assigned to area I. The name may contain up to twelve characters. arname is set to twelve blanks by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Two-Terminal-DC-Lines","page":"API","title":"Two-Terminal DC Lines","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"TwoTerminalDCLines\nTwoTerminalDCLines30\nTwoTerminalDCLines33","category":"page"},{"location":"api.html#PowerFlowData.TwoTerminalDCLines","page":"API","title":"PowerFlowData.TwoTerminalDCLines","text":"abstract type TwoTerminalDCLines <: PowerFlowData.Records\n\nThe TwoTerminalDCLines data record depends on the PSSE version:\n\nSee TwoTerminalDCLines30 for PSSE v30 files.\nSee TwoTerminalDCLines33 for PSSE v33 files.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.TwoTerminalDCLines30","page":"API","title":"PowerFlowData.TwoTerminalDCLines30","text":"struct TwoTerminalDCLines30 <: TwoTerminalDCLines\n\nThe two-terminal DC transmission line model is used to simulate either a point-to-point system with rectifier and inverter separated by a bipolar or mono-polar transmission system or a Back-to-Back system where the rectifier and inverter are physically located at the same site and separated only by a short bus-bar.\n\nThe data requirements fall into three groups:\n\nControl parameters and set-points\nConverter transformers\nThe DC line characteristics\n\nThe steady-state model comprising this data enables not only power flow analysis but also establishes the initial steady-state for dynamic analysis.\n\nFields\n\ni::Vector{Int16}\nThe DC line number.\nmdc::Vector{Int8}\nControl mode:\n0 for blocked,\n1 for power,\n2 for current.\nmdc = 0 by default.\n\nrdc::Vector{Float64}\nThe DC line resistance; entered in ohms. No default.\n\nsetvl::Vector{Float64}\nCurrent (amps) or power (MW) demand. When mdc is 1, a positive value of setvl specifies desired power at the rectifier and a negative value specifies desired inverter power. No default.\n\nvschd::Vector{Float64}\nScheduled compounded DC voltage; entered in kV. No default.\n\nvcmod::Vector{Float64}\nMode switch DC voltage; entered in kV. When the inverter DC voltage falls below this value and the line is in power control mode (i.e. mdc = 1), the line switches to current control mode with a desired current corresponding to the desired power at scheduled DC voltage. vcmod = 0.0 by default.\n\nrcomp::Vector{Float64}\nCompounding resistance; entered in ohms. Gamma and/or TAPI is used to attempt to hold the compounded voltage (vdci + dccur  rcomp) at vschd.\nTo control the inverter end DC voltage VDCI, set rcomp to zero;\nto control the rectifier end DC voltage VDCR, set rcomp to the DC line resistance, rdc;\notherwise, set rcomp to the appropriate fraction of rdc.\nrcomp = 0.0 by default.\n\ndelti::Vector{Float64}\nMargin entered in per unit of desired DC power or current. This is the fraction by which the order is reduced when alpha is at its minimum (alfmn) and the inverter is controlling the line current. delti = 0.0 by default.\n\nmeter::Vector{InlineStrings.String1}\nMetered end code of either \"R\" (for rectifier) or \"I\" (for inverter). meter = \"I\" by default.\n\ndcvmin::Vector{Float64}\nMinimum compounded DC voltage; entered in kV. Only used in constant gamma operation (i.e. when gammx = gammn) when TAPI is held constant and an AC transformer tap is adjusted to control DC voltage (i.e. when ifi, iti, and idi specify a two-winding transformer). dcvmin = 0.0 by default.\n\ncccitmx::Vector{Int32}\nIteration limit for capacitor commutated two-terminal DC line Newton solution procedure. cccitmx = 20 by default.\n\ncccacc::Vector{Float64}\nAcceleration factor for capacitor commutated two-terminal DC line Newton solution procedure. cccacc = 1.0 by default.\n\nipr::Vector{Int32}\nRectifier converter bus number, or extended bus name enclosed in single quotes. No default.\n\nnbr::Vector{Int32}\nNumber of bridges in series (rectifier). No default.\n\nalfmx::Vector{Float64}\nNominal maximum rectifier firing angle; entered in degrees. No default.\n\nalfmn::Vector{Float64}\nMinimum steady-state rectifier firing angle; entered in degrees. No default.\n\nrcr::Vector{Float64}\nRectifier commutating transformer resistance per bridge; entered in ohms. No default allowed.\n\nxcr::Vector{Float64}\nRectifier commutating transformer reactance per bridge; entered in ohms. No default allowed.\n\nebasr::Vector{Float64}\nRectifier primary base AC voltage; entered in kV. No default.\n\ntrr::Vector{Float64}\nRectifier transformer ratio. trr = 1.0 by default.\n\ntapr::Vector{Float64}\nRectifier tap setting. tapr = 1.0 by default.\n\ntmxr::Vector{Float64}\nMaximum rectifier tap setting. tmxr = 1.5 by default.\n\ntmnr::Vector{Float64}\nMinimum rectifier tap setting. tmnr = 0.51 by default.\n\nstpr::Vector{Float64}\nRectifier tap step; must be positive. stpr = 0.00625 by default.\n\nicr::Vector{Int32}\nRectifier firing angle measuring bus number, or extended bus name enclosed in single quotes. The firing angle and angle limits used inside the DC model are adjusted by the difference between the phase angles at this bus and the AC/DC interface (i.e. the converter bus, ipr). icr = 0 by default.\n\nifr::Vector{Int32}\nWinding one side \"from bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer. ifr = 0 by default.\n\nitr::Vector{Int32}\nWinding two side \"to bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer. itr = 0 by default.\n\nidr::Vector{InlineStrings.String3}\nCircuit identifier; the branch described by ifr, itr, and idr must have been entered as a two-winding transformer; an AC transformer may control at most only one DC converter. idr = '1' by default.\nIf no branch is specified, tapr is adjusted to keep alpha within limits; otherwise, tapr is held fixed and this transformer’s tap ratio is adjusted. The adjustment logic assumes that the rectifier converter bus is on the winding two side of the transformer. The limits tmxr and tmnr specified here are used; except for the transformer control mode flag (cod of Transformers), the AC tap adjustment data is ignored.\n\nxcapr::Vector{Float64}\nCommutating capacitor reactance magnitude per bridge; entered in ohms. xcapr = 0.0 by default.\n\nipi::Vector{Int32}\nInverter converter bus number, or extended bus name enclosed in single quotes.\n\nnbi::Vector{Int32}\nNumber of bridges in series (inverter).\n\ngammx::Vector{Float64}\nNominal maximum inverter firing angle; entered in degrees.\n\ngammn::Vector{Float64}\nMinimum steady-state inverter firing angle; entered in degrees.\n\nrci::Vector{Float64}\nInverter commutating transformer resistance per bridge; entered in ohms.\n\nxci::Vector{Float64}\nInverter commutating transformer reactance per bridge; entered in ohms.\n\nebasi::Vector{Float64}\nInverter primary base AC voltage; entered in kV.\n\ntri::Vector{Float64}\nInverter transformer ratio.\n\ntapi::Vector{Float64}\nInverter tap setting.\n\ntmxi::Vector{Float64}\nMaximum inverter tap setting.\n\ntmni::Vector{Float64}\nMinimum inverter tap setting.\n\nstpi::Vector{Float64}\nInverter tap step; must be positive.\n\nici::Vector{Int32}\nInverter firing angle measuring bus number, or extended bus name enclosed in single quotes.\n\nifi::Vector{Int32}\nWinding one side \"from bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer.\n\niti::Vector{Int32}\nWinding two side \"to bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer.\n\nidi::Vector{InlineStrings.String3}\nCircuit identifier; the branch described by ifr, itr, and idr must have been entered as a two-winding transformer; an AC transformer may control at most only one DC converter.\n\nxcapi::Vector{Float64}\nCommutating capacitor reactance magnitude per bridge; entered in ohms.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.TwoTerminalDCLines33","page":"API","title":"PowerFlowData.TwoTerminalDCLines33","text":"struct TwoTerminalDCLines33 <: TwoTerminalDCLines\n\nThe two-terminal DC transmission line model is used to simulate either a point-to-point system with rectifier and inverter separated by a bipolar or mono-polar transmission system or a Back-to-Back system where the rectifier and inverter are physically located at the same site and separated only by a short bus-bar.\n\nThe data requirements fall into three groups:\n\nControl parameters and set-points\nConverter transformers\nThe DC line characteristics\n\nThe steady-state model comprising this data enables not only power flow analysis but also establishes the initial steady-state for dynamic analysis.\n\nFields\n\nname::Vector{InlineStrings.String15}\nThe non-blank alphanumeric identifier assigned to this DC line. Each two-terminal DC line must have a unique name.name` may be up to twelve characters and may contain any combination of blanks, uppercase letters, numbers and special characters. name must be enclosed in single or double quotes if it contains any blanks or special characters. No default allowed.\n\nmdc::Vector{Int8}\nControl mode:\n0 for blocked,\n1 for power,\n2 for current.\nmdc = 0 by default.\n\nrdc::Vector{Float64}\nThe DC line resistance; entered in ohms. No default.\n\nsetvl::Vector{Float64}\nCurrent (amps) or power (MW) demand. When mdc is 1, a positive value of setvl specifies desired power at the rectifier and a negative value specifies desired inverter power. No default.\n\nvschd::Vector{Float64}\nScheduled compounded DC voltage; entered in kV. No default.\n\nvcmod::Vector{Float64}\nMode switch DC voltage; entered in kV. When the inverter DC voltage falls below this value and the line is in power control mode (i.e. mdc = 1), the line switches to current control mode with a desired current corresponding to the desired power at scheduled DC voltage. vcmod = 0.0 by default.\n\nrcomp::Vector{Float64}\nCompounding resistance; entered in ohms. Gamma and/or TAPI is used to attempt to hold the compounded voltage (vdci + dccur  rcomp) at vschd.\nTo control the inverter end DC voltage VDCI, set rcomp to zero;\nto control the rectifier end DC voltage VDCR, set rcomp to the DC line resistance, rdc;\notherwise, set rcomp to the appropriate fraction of rdc.\nrcomp = 0.0 by default.\n\ndelti::Vector{Float64}\nMargin entered in per unit of desired DC power or current. This is the fraction by which the order is reduced when alpha is at its minimum (alfmn) and the inverter is controlling the line current. delti = 0.0 by default.\n\nmeter::Vector{InlineStrings.String1}\nMetered end code of either \"R\" (for rectifier) or \"I\" (for inverter). meter = \"I\" by default.\n\ndcvmin::Vector{Float64}\nMinimum compounded DC voltage; entered in kV. Only used in constant gamma operation (i.e. when gammx = gammn) when TAPI is held constant and an AC transformer tap is adjusted to control DC voltage (i.e. when ifi, iti, and idi specify a two-winding transformer). dcvmin = 0.0 by default.\n\ncccitmx::Vector{Int32}\nIteration limit for capacitor commutated two-terminal DC line Newton solution procedure. cccitmx = 20 by default.\n\ncccacc::Vector{Float64}\nAcceleration factor for capacitor commutated two-terminal DC line Newton solution procedure. cccacc = 1.0 by default.\n\nipr::Vector{Int32}\nRectifier converter bus number, or extended bus name enclosed in single quotes. No default.\n\nnbr::Vector{Int32}\nNumber of bridges in series (rectifier). No default.\n\nalfmx::Vector{Float64}\nNominal maximum rectifier firing angle; entered in degrees. No default.\n\nalfmn::Vector{Float64}\nMinimum steady-state rectifier firing angle; entered in degrees. No default.\n\nrcr::Vector{Float64}\nRectifier commutating transformer resistance per bridge; entered in ohms. No default allowed.\n\nxcr::Vector{Float64}\nRectifier commutating transformer reactance per bridge; entered in ohms. No default allowed.\n\nebasr::Vector{Float64}\nRectifier primary base AC voltage; entered in kV. No default.\n\ntrr::Vector{Float64}\nRectifier transformer ratio. trr = 1.0 by default.\n\ntapr::Vector{Float64}\nRectifier tap setting. tapr = 1.0 by default.\n\ntmxr::Vector{Float64}\nMaximum rectifier tap setting. tmxr = 1.5 by default.\n\ntmnr::Vector{Float64}\nMinimum rectifier tap setting. tmnr = 0.51 by default.\n\nstpr::Vector{Float64}\nRectifier tap step; must be positive. stpr = 0.00625 by default.\n\nicr::Vector{Int32}\nRectifier firing angle measuring bus number, or extended bus name enclosed in single quotes. The firing angle and angle limits used inside the DC model are adjusted by the difference between the phase angles at this bus and the AC/DC interface (i.e. the converter bus, ipr). icr = 0 by default.\n\nifr::Vector{Int32}\nWinding one side \"from bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer. ifr = 0 by default.\n\nitr::Vector{Int32}\nWinding two side \"to bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer. itr = 0 by default.\n\nidr::Vector{InlineStrings.String3}\nCircuit identifier; the branch described by ifr, itr, and idr must have been entered as a two-winding transformer; an AC transformer may control at most only one DC converter. idr = '1' by default.\nIf no branch is specified, tapr is adjusted to keep alpha within limits; otherwise, tapr is held fixed and this transformer’s tap ratio is adjusted. The adjustment logic assumes that the rectifier converter bus is on the winding two side of the transformer. The limits tmxr and tmnr specified here are used; except for the transformer control mode flag (cod of Transformers), the AC tap adjustment data is ignored.\n\nxcapr::Vector{Float64}\nCommutating capacitor reactance magnitude per bridge; entered in ohms. xcapr = 0.0 by default.\n\nipi::Vector{Int32}\nInverter converter bus number, or extended bus name enclosed in single quotes.\n\nnbi::Vector{Int32}\nNumber of bridges in series (inverter).\n\ngammx::Vector{Float64}\nNominal maximum inverter firing angle; entered in degrees.\n\ngammn::Vector{Float64}\nMinimum steady-state inverter firing angle; entered in degrees.\n\nrci::Vector{Float64}\nInverter commutating transformer resistance per bridge; entered in ohms.\n\nxci::Vector{Float64}\nInverter commutating transformer reactance per bridge; entered in ohms.\n\nebasi::Vector{Float64}\nInverter primary base AC voltage; entered in kV.\n\ntri::Vector{Float64}\nInverter transformer ratio.\n\ntapi::Vector{Float64}\nInverter tap setting.\n\ntmxi::Vector{Float64}\nMaximum inverter tap setting.\n\ntmni::Vector{Float64}\nMinimum inverter tap setting.\n\nstpi::Vector{Float64}\nInverter tap step; must be positive.\n\nici::Vector{Int32}\nInverter firing angle measuring bus number, or extended bus name enclosed in single quotes.\n\nifi::Vector{Int32}\nWinding one side \"from bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer.\n\niti::Vector{Int32}\nWinding two side \"to bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer.\n\nidi::Vector{InlineStrings.String3}\nCircuit identifier; the branch described by ifr, itr, and idr must have been entered as a two-winding transformer; an AC transformer may control at most only one DC converter.\n\nxcapi::Vector{Float64}\nCommutating capacitor reactance magnitude per bridge; entered in ohms.\n\n\n\n\n\n","category":"type"},{"location":"api.html#VSC-DC-Lines","page":"API","title":"VSC DC Lines","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"VSCDCLines","category":"page"},{"location":"api.html#PowerFlowData.VSCDCLines","page":"API","title":"PowerFlowData.VSCDCLines","text":"struct VSCDCLines <: PowerFlowData.Records\n\nVoltage source converter (VSC) DC lines.\n\nDefines line quantities and control parameters, and the converter buses (converter 1 and converter 2), along with their data quantities and control parameters.\n\nFields\n\nname::Vector{InlineStrings.String15}\nThe non-blank alphanumeric identifier assigned to this VSC DC line. Each VSC DC line must have a unique name. The name may be up to twelve characters and must be enclosed in single quotes. name may contain any combination of blanks, uppercase letters, numbers and special characters. No default.\n\nmdc::Vector{Int8}\nControl mode:\n0 for out-of-service,\n1 for in-service.\nmdc = 1 by default.\n\nrdc::Vector{Float64}\nThe DC line resistance entered in ohms. rdc must be positive. No default.\n\no1::Vector{Int16}\nAn owner number; (1 through the maximum number of owners at the current size level). Each VSC DC line may have up to four owners. See Owners. By default, 01 is 1, and O2, O3 and O4 are zero.\n\nf1::Vector{Float64}\nThe fraction of total ownership assigned to owner o1; each Fi must be positive. The Fi values are normalized such that they sum to 1.0 before they are placed in the working case. By default, each F_i is 1.0.\n\no2::Vector{Int16}\nAn owner number; (1 through the maximum number of owners at the current size level). See Owners. By default, o2 is zero.\n\nf2::Vector{Float64}\nThe fraction of total ownership assigned to owner o2; must be positive. By default, f2 is 1.0.\n\no3::Vector{Int16}\nAn owner number; (1 through the maximum number of owners at the current size level). By default, o3 is zero.\n\nf3::Vector{Float64}\nThe fraction of total ownership assigned to owner o2; must be positive. By default, f3 is 1.0.\n\no4::Vector{Int16}\nAn owner number; (1 through the maximum number of owners at the current size level). By default, o4 is zero.\n\nf4::Vector{Float64}\nThe fraction of total ownership assigned to owner o2; must be positive. By default, f4 is 1.0.\n\nibus1::Vector{Int32}\nConverter 1 bus number, or extended bus name enclosed in single quotes. No default.\ntype1::Vector{Int8}\nCode for the type of converter 1 DC control:\n0 for converter out-of-service,\n1 for DC voltage control,\n2 for MW control.\nWhen both converters are in-service, exactly one converter of each VSC DC line must be type 1. No default.\n\nmode1::Vector{Int8}\nConverter 1 AC control mode:\n1 for AC voltage control,\n2 for fixed AC power factor.\nmode = 1 by default.\n\ndocet1::Vector{Float64}\nConverter 1 DC setpoint.\nFor type = 1, dcset is the scheduled DC voltage on the DC side of the converter bus; entered in kV.\nFor type = 2, dcset is the power demand, where a positive value specifies that the converter is feeding active power into the AC network at bus ibus, and a negative value specifies that the converter is withdrawing active power from the AC network at bus ibus; entered in MW.\nNo default .\n\nacset1::Vector{Float64}\nConverter 1 AC setpoint.\nFor mode = 1, acset is the regulated AC voltage setpoint; entered in pu.\nFor mode = 2, acset is the power factor setpoint.\nacset = 1.0 by default.\n\naloss1::Vector{Float64}\nCoefficients of the linear equation used to calculate converter 1 losses: KW_conv loss = A_loss + I_dc * B_loss aloss is entered in kW. aloss = bloss = 0.0 by default.\n\nbloss1::Vector{Float64}\nCoefficients of the linear equation used to calculate converter 1 losses: KW_conv loss = A_loss + I_dc * B_loss bloss is entered in kW/amp. aloss = bloss = 0.0 by default.\n\nminloss1::Vector{Float64}\nMinimum converter 1 losses; entered in kW. minloss = 0.0 by default.\nsmax1::Vector{Float64}\nConverter 1 MVA rating; entered in MVA. smax = 0.0 to allow unlimited converter MVA loading. smax = 0.0 by default.\n\nimax1::Vector{Float64}\nConverter 1 AC current rating; entered in amps. imax = 0.0 to allow unlimited converter current loading. If a positive imax is specified, the base voltage assigned to bus ibus must be positive. imax = 0.0 by default.\n\npwf1::Vector{Float64}\nPower weighting factor fraction (0.0 < pwf < 1.0) used in reducing the active power order and either the reactive power order (when mode is 2) or the reactive power limits (when mode is 1) when the converter MVA or current rating is violated. When pwf is 0.0, only the active power is reduced; when PWF is 1.0, only the reactive power is reduced; otherwise, a weighted reduction of both active and reactive power is applied. pwf = 1.0 by default.\n\nmaxq1::Vector{Float64}\nReactive power upper limit; entered in Mvar. A positive value of reactive power indicates reactive power flowing into the AC network from the converter; a negative value of reactive power indicates reactive power withdrawn from the AC network. Not used if mode = 2. maxq = 9999.0 by default.\n\nminq1::Vector{Float64}\nReactive power lower limit; entered in Mvar. A positive value of reactive power indicates reactive power flowing into the AC network from the converter; a negative value of reactive power indicates reactive power withdrawn from the AC network. Not used if mode = 2. minq = -9999.0 by default.\n\nremot1::Vector{Int32}\nBus number, or extended bus name enclosed in single quotes, of a remote type 1 or 2 bus whose voltage is to be regulated by this converter to the value specified by acset. If bus remot is other than a type 1 or 2 bus, bus ibus regulates its own voltage to the value specified by acset. remot is entered as zero if the converter is to regulate its own voltage. Not used if mode = 2. remot = 0 by default.\n\nrmpct1::Vector{Float64}\nPercent of the total Mvar required to hold the voltage at the bus controlled by bus ibus that are to be contributed by this VSC; rmpct must be positive. rmpct is needed only if remot specifies a valid remote bus and there is more than one local or remote voltage controlling device (plant, switched shunt, FACTS device shunt element, or VSC DC line converter) controlling the voltage at bus remot to a setpoint, or remot is zero but bus ibus is the controlled bus, local or remote, of one or more other setpoint mode voltage controlling devices. Not used if mode = 2. rmpct = 100.0 by default.\n\nibus2::Vector{Int32}\nConverter 2 bus number, or extended bus name enclosed in single quotes. No default.\ntype2::Vector{Int8}\nCode for the type of converter 2 DC control\nmode2::Vector{Int8}\nConverter 2 AC control mode\ndocet2::Vector{Float64}\nConverter 2 DC setpoint.\nacset2::Vector{Float64}\nConverter 2 AC setpoint.\naloss2::Vector{Float64}\nCoefficient A_loss of the linear equation used to calculate converter 2 losses.\nbloss2::Vector{Float64}\nCoefficient B_loss of the linear equation used to calculate converter 2 losses.\nminloss2::Vector{Float64}\nMinimum converter 2 losses; entered in kW. minloss = 0.0 by default.\nsmax2::Vector{Float64}\nConverter 2 MVA rating; entered in MVA.\nimax2::Vector{Float64}\nConverter 2 AC current rating; entered in amps.\npwf2::Vector{Float64}\nPower weighting factor fraction (0.0 < pwf < 1.0) for converter 2.\nmaxq2::Vector{Float64}\nReactive power upper limit for converter 2; entered in Mvar.\nminq2::Vector{Float64}\nReactive power lower limit for converter 2; entered in Mvar.\nremot2::Vector{Int32}\nBus number to be regulated by converter 2 to the value specified by acset2.\nrmpct2::Vector{Float64}\n\n\n\n\n\n","category":"type"},{"location":"api.html#Switched-Shunts","page":"API","title":"Switched Shunts","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"SwitchedShunts\nSwitchedShunts30\nSwitchedShunts33","category":"page"},{"location":"api.html#PowerFlowData.SwitchedShunts","page":"API","title":"PowerFlowData.SwitchedShunts","text":"abstract type SwitchedShunts <: PowerFlowData.Records\n\nThe SwitchedShunts data record depends on the PSSE version:\n\nSee SwitchedShunts30 for PSSE v30 files.\nSee SwitchedShunts33 for PSSE v33 files.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.SwitchedShunts30","page":"API","title":"PowerFlowData.SwitchedShunts30","text":"struct SwitchedShunts30 <: SwitchedShunts\n\nRepresents switched shunt devices, in the form of capacitors and/or reactors on a network bus.\n\nThe switched shunt elements at a bus may consist entirely of blocks of shunt reactors (each Bi is a negative quantity) or entirely of blocks of capacitor banks (each Bi is a positive quantity). Any bus can have both switched capacitors and reactors.\n\nEach network bus to be represented in PSS/E with switched shunt admittance devices must have a switched shunt data record specified for it. The switched shunts are represented with up to eight blocks of admittance, each one of which consists of up to nine steps of the specified block admittance.\n\nFields\n\ni::Vector{Int32}\nBus number, or extended bus name enclosed in single quotes.\n\nmodsw::Vector{Int8}\nControl mode:\n0 - fixed\n1 - discrete adjustment, controlling voltage locally or at bus swrem\n2 - continuous adjustment, controlling voltage locally or at bus swrem\n3 - discrete adjustment, controlling reactive power output of the plant at bus swrem\n4 - discrete adjustment, controlling reactive power output of the VSC DC line converter\nat bus swrem of the VSC DC line whose name is specified as rmidnt\n5 - discrete adjustment, controlling admittance setting of the switched shunt at bus swrem\nmodsw = 1 by default.\n\nvswhi::Vector{Float64}\nWhen modsw is 1 or 2, the controlled voltage upper limit; entered in pu. When modsw is 3, 4 or 5, the controlled reactive power range upper limit; entered in pu of the total reactive power range of the controlled voltage controlling device. vswhi is not used when modsw is 0. vswhi = 1.0 by default.\n\nvswlo::Vector{Float64}\nWhen modsw is 1 or 2, the controlled voltage lower limit; entered in pu. When modsw is 3, 4 or 5, the controlled reactive power range lower limit; entered in pu of the total reactive power range of the controlled voltage controlling device. vswlo is not used when modsw is 0. vswlo = 1.0 by default.\n\nswrem::Vector{Int32}\nBus number, or extended bus name enclosed in single quotes, of the bus whose voltage or connected equipment reactive power output is controlled by this switched shunt.\nWhen modsw is 1 or 2, swrem is entered as 0 if the switched shunt is to regulate its own voltage;\notherwise, swrem specifies the remote type one or two bus whose voltage is to be regulated by this switched shunt.\nWhen modsw is 3, swrem specifies the type two or three bus whose plant reactive power output is to be regulated by this switched shunt.\nSet swrem to \"I\" if the switched shunt and the plant which it controls are connected to the same bus.\nWhen modsw is 4, swrem specifies the converter bus of a VSC dc line whose converter reactive power output is to be regulated by this switched shunt.\nSet swrem to \"I\" if the switched shunt and the VSC dc line converter which it controls are connected to the same bus.\nWhen modsw is 5, swrem specifies the remote bus to which the switched shunt whose admittance setting is to be regulated by this switched shunt is connected.\nswrem is not used when modsw is 0.\nswrem = 0 by default.\n\nrmpct::Vector{Float64}\nPercent of the total Mvar required to hold the voltage at the bus controlled by bus I that are to be contributed by this switched shunt; rmpct must be positive.\nrmpct is needed only if swrem specifies a valid remote bus and there is more than one local or remote voltage controlling device (plant, switched shunt, FACTS device shunt element, or VSC DC line converter) controlling the voltage at bus swrem to a setpoint, or swrem is zero but bus I is the controlled bus, local or remote, of one or more other setpoint mode voltage controlling devices. Only used if modsw = 1 or 2. rmpct = 100.0 by default.\n\nrmidnt::Vector{InlineStrings.String15}\nWhen modsw is 4, the name of the VSC DC line whose converter bus is specified in swrem. rmidnt is not used for other values of modsw. rmidnt is a blank name by default.\n\nbinit::Vector{Float64}\nInitial switched shunt admittance; entered in Mvar at unity voltage. binit = 0.0 by default.\n\nn1::Vector{Int32}\nNumber of steps for block i. The first zero value of Ni or Bi is interpreted as the end of the switched shunt blocks for bus I. ni = 0 by default.\n\nb1::Vector{Float64}\nAdmittance increment for each of N_i steps in block i; entered in Mvar at unity voltage. bi = 0.0 by default.\n\nn2::Vector{Int32}\nb2::Vector{Float64}\nn3::Vector{Int32}\nb3::Vector{Float64}\nn4::Vector{Int32}\nb4::Vector{Float64}\nn5::Vector{Int32}\nb5::Vector{Float64}\nn6::Vector{Int32}\nb6::Vector{Float64}\nn7::Vector{Int32}\nb7::Vector{Float64}\nn8::Vector{Int32}\nb8::Vector{Float64}\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.SwitchedShunts33","page":"API","title":"PowerFlowData.SwitchedShunts33","text":"struct SwitchedShunts33 <: SwitchedShunts\n\nRepresents switched shunt devices, in the form of capacitors and/or reactors on a network bus.\n\nThe switched shunt elements at a bus may consist entirely of blocks of shunt reactors (each Bi is a negative quantity) or entirely of blocks of capacitor banks (each Bi is a positive quantity). Any bus can have both switched capacitors and reactors.\n\nEach network bus to be represented in PSS/E with switched shunt admittance devices must have a switched shunt data record specified for it. The switched shunts are represented with up to eight blocks of admittance, each one of which consists of up to nine steps of the specified block admittance.\n\nFields\n\ni::Vector{Int32}\nBus number, or extended bus name enclosed in single quotes.\n\nmodsw::Vector{Int8}\nControl mode:\n0 - fixed\n1 - discrete adjustment, controlling voltage locally or at bus swrem\n2 - continuous adjustment, controlling voltage locally or at bus swrem\n3 - discrete adjustment, controlling reactive power output of the plant at bus swrem\n4 - discrete adjustment, controlling reactive power output of the VSC DC line converter\nat bus swrem of the VSC DC line whose name is specified as rmidnt\n5 - discrete adjustment, controlling admittance setting of the switched shunt at bus swrem\nmodsw = 1 by default.\n\nadjm::Vector{Bool}\nAdjustment method:\n0 - steps and blocks are switched on in input order, and off in reverse input order; this adjustment method was the only method available prior to PSS®E-32.0.\n1 - steps and blocks are switched on and off such that the next highest (or lowest, as appropriate) total admittance is achieved.\nadjm = 0 by default.\n\nstat::Vector{Bool}\nInitial switched shunt status of one for in-service and zero for out-of-service. stat = 1 by default.\n\nvswhi::Vector{Float64}\nWhen modsw is 1 or 2, the controlled voltage upper limit; entered in pu. When modsw is 3, 4 or 5, the controlled reactive power range upper limit; entered in pu of the total reactive power range of the controlled voltage controlling device. vswhi is not used when modsw is 0. vswhi = 1.0 by default.\n\nvswlo::Vector{Float64}\nWhen modsw is 1 or 2, the controlled voltage lower limit; entered in pu. When modsw is 3, 4 or 5, the controlled reactive power range lower limit; entered in pu of the total reactive power range of the controlled voltage controlling device. vswlo is not used when modsw is 0. vswlo = 1.0 by default.\n\nswrem::Vector{Int32}\nBus number, or extended bus name enclosed in single quotes, of the bus whose voltage or connected equipment reactive power output is controlled by this switched shunt.\nWhen modsw is 1 or 2, swrem is entered as 0 if the switched shunt is to regulate its own voltage;\notherwise, swrem specifies the remote type one or two bus whose voltage is to be regulated by this switched shunt.\nWhen modsw is 3, swrem specifies the type two or three bus whose plant reactive power output is to be regulated by this switched shunt.\nSet swrem to \"I\" if the switched shunt and the plant which it controls are connected to the same bus.\nWhen modsw is 4, swrem specifies the converter bus of a VSC dc line whose converter reactive power output is to be regulated by this switched shunt.\nSet swrem to \"I\" if the switched shunt and the VSC dc line converter which it controls are connected to the same bus.\nWhen modsw is 5, swrem specifies the remote bus to which the switched shunt whose admittance setting is to be regulated by this switched shunt is connected.\nswrem is not used when modsw is 0.\nswrem = 0 by default.\n\nrmpct::Vector{Float64}\nPercent of the total Mvar required to hold the voltage at the bus controlled by bus I that are to be contributed by this switched shunt; rmpct must be positive.\nrmpct is needed only if swrem specifies a valid remote bus and there is more than one local or remote voltage controlling device (plant, switched shunt, FACTS device shunt element, or VSC DC line converter) controlling the voltage at bus swrem to a setpoint, or swrem is zero but bus I is the controlled bus, local or remote, of one or more other setpoint mode voltage controlling devices. Only used if modsw = 1 or 2. rmpct = 100.0 by default.\n\nrmidnt::Vector{InlineStrings.String15}\nWhen modsw is 4, the name of the VSC DC line whose converter bus is specified in swrem. rmidnt is not used for other values of modsw. rmidnt is a blank name by default.\n\nbinit::Vector{Float64}\nInitial switched shunt admittance; entered in Mvar at unity voltage. binit = 0.0 by default.\n\nn1::Vector{Int32}\nNumber of steps for block i. The first zero value of Ni or Bi is interpreted as the end of the switched shunt blocks for bus I. ni = 0 by default.\n\nb1::Vector{Float64}\nAdmittance increment for each of N_i steps in block i; entered in Mvar at unity voltage. bi = 0.0 by default.\n\nn2::Vector{Int32}\nb2::Vector{Float64}\nn3::Vector{Int32}\nb3::Vector{Float64}\nn4::Vector{Int32}\nb4::Vector{Float64}\nn5::Vector{Int32}\nb5::Vector{Float64}\nn6::Vector{Int32}\nb6::Vector{Float64}\nn7::Vector{Int32}\nb7::Vector{Float64}\nn8::Vector{Int32}\nb8::Vector{Float64}\n\n\n\n\n\n","category":"type"},{"location":"api.html#Transformer-Impedance-Corrections","page":"API","title":"Transformer Impedance Corrections","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"ImpedanceCorrections","category":"page"},{"location":"api.html#PowerFlowData.ImpedanceCorrections","page":"API","title":"PowerFlowData.ImpedanceCorrections","text":"struct ImpedanceCorrections <: PowerFlowData.Records\n\nTransformer impedance corrections are used to model a change of transformer impedance as off-nominal turns ratio or phase shift angle is adjusted.\n\nThe T_i values on a transformer impedance correction record must all be either tap ratios or phase shift angles. They must be entered in strictly ascending order; i.e. for each i, T_i+1  T_i. Each F_i entered must be greater than zero.\n\nOn each record, at least 2 pairs of values must be specified and up to 11 may be entered.\n\nThe T_i values that are a function of tap ratio (rather than phase shift angle) are in units of the controlling winding’s off-nominal turns ratio in pu of the controlling winding’s bus base voltage.\n\nAlthough a transformer winding is assigned to an impedance correction record, each record may be shared among many transformer windings. If the first T in a record is less than 0.5 or the last T entered is greater than 1.5, T is assumed to be the phase shift angle and the impedance of each transformer winding assigned to the record is treated as a function of phase shift angle. Otherwise, the impedances of the transformer windings assigned to the record are made sensitive to off-nominal turns ratio.\n\nFields\n\ni::Vector{Int16}\nImpedance correction record number.\nt1::Vector{Float64}\nEither off-nominal turns ratio in pu or phase shift angle in degrees. ti = 0.0 by default.\n\nf1::Vector{Float64}\nScaling factor by which transformer nominal impedance is to be multiplied to obtain the actual transformer impedance for the corresponding ti. fi = 0.0 by default.\n\nt2::Vector{Float64}\nf2::Vector{Float64}\nt3::Vector{Float64}\nf3::Vector{Float64}\nt4::Vector{Float64}\nf4::Vector{Float64}\nt5::Vector{Float64}\nf5::Vector{Float64}\nt6::Vector{Float64}\nf6::Vector{Float64}\nt7::Vector{Float64}\nf7::Vector{Float64}\nt8::Vector{Float64}\nf8::Vector{Float64}\nt9::Vector{Float64}\nf9::Vector{Float64}\nt10::Vector{Float64}\nf10::Vector{Float64}\nt11::Vector{Float64}\nf11::Vector{Float64}\n\n\n\n\n\n","category":"type"},{"location":"api.html#Multi-Terminal-DC-Lines","page":"API","title":"Multi-Terminal DC Lines","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"MultiTerminalDCLines\nMultiTerminalDCLine\nDCLineID\nDCLineID30\nDCLineID33\nACConverters\nDCBuses\nDCLinks","category":"page"},{"location":"api.html#PowerFlowData.MultiTerminalDCLines","page":"API","title":"PowerFlowData.MultiTerminalDCLines","text":"struct MultiTerminalDCLines{I<:DCLineID} <: PowerFlowData.Records\n\nPSS/E allows the representation of up to 12 converter stations on one multi-terminal DC line. Further, it allows the modelling of multi-terminal networks of up to 20 buses including the AC convertor buses and the DC network buses.\n\nNotes\n\nThe following are notes on multi-terminal links:\n\nConventional two-terminal and multi-terminal DC lines are stored separately. Therefore, there may simultaneously exist, for example, a two-terminal DC line identified as DC line number 1 along with a multi-terminal line numbered 1.\nMulti-terminal lines should have at least three converter terminals; conventional DC lines consisting of two terminals should be modeled as two-terminal lines (see TwoTerminalDCLines.\nAC converter buses may be type one, two, or three buses. Generators, loads, fixed and switched shunt elements, other DC line converters, and FACTS device sending ends are permitted at converter buses.\nEach multi-terminal DC line is treated as a subnetwork of DC buses and DC links connecting its AC converter buses. For each multi-terminal DC line, the DC buses must be numbered 1 through ndcbs.\nEach AC converter bus must be specified as ib on exactly one DC bus record; there may be DC buses connected only to other DC buses by DC links but not to any AC converter bus.\nAC converter bus ib may be connected to a DC bus idc, which is connected directly to ground. ib is specified on the DC bus record for DC bus idc; the idc2 field is specified as zero.\nAlternatively, AC converter bus ib may be connected to two DC buses idc and idc2, the second of which is connected to ground through a specified resistance. ib and idc2 are specified on the DC bus record for DC bus idc; on the DC bus record for bus idc2, the AC converter bus and second DC bus fields (ib and idc2, respectively) must be specified as zero and the grounding resistance is specified as rgrnd.\nThe same DC bus may be specified as the second DC bus for more than one AC converter bus.\nAll DC buses within a multi-terminal DC line must be reachable from any other point within the subnetwork.\nThe area number assigned to DC buses and the metered end designation of DC links are used in calculating area interchange and assigning losses as well as in the interchange control option of the power flow solution activities. Similarly, the zone assignment and metered end specification are used in Zonal reporting activities.\n\nFields\n\nlines::Vector{MultiTerminalDCLine}\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.MultiTerminalDCLine","page":"API","title":"PowerFlowData.MultiTerminalDCLine","text":"struct MultiTerminalDCLine\n\nEach multi-terminal DC line record defines the number of converters, number of DC buses and number of DC links as well as related bus numbers and control mode (see DCLineID), then data for:\n\neach converter (see ACConverters)\neach DC bus (see DCBuses)\neach DC link (see DCLinks)\n\nFields\n\nline_id::DCLineID\nHigh-level data about this line.\nconverters::ACConverters\nline.nconv converter records.\nbuses::DCBuses\nline.ndcbs DC bus records.\nlinks::DCLinks\nline.ndcln DC link records.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.DCLineID","page":"API","title":"PowerFlowData.DCLineID","text":"abstract type DCLineID <: PowerFlowData.IDRow\n\nThe DCLineID data record depends on the PSSE version:\n\nSee DCLineID30 for PSSE v30 files.\nSee DCLineID33 for PSSE v33 files.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.DCLineID30","page":"API","title":"PowerFlowData.DCLineID30","text":"struct DCLineID30 <: DCLineID\n\nFields\n\ni::Int16\nMulti-terminal DC line number.\nnconv::Int8\nNumber of AC converter station buses in multi-terminal DC line i. No default.\nndcbs::Int8\nNumber of DC buses in multi-terminal DC line i (nconv < ndcbs). No default.\nndcln::Int64\nNumber of DC links in multi-terminal DC line i. No default.\nmdc::Int8\nControl mode\n0 - blocked\n1 - power\n2 - current\nmdc = 0 by default.\n\nvconv::Int32\nBus number, or extended bus name enclosed in single quotes, of the AC converter station bus that controls DC voltage on the positive pole of multi-terminal DC line i. Bus vconv must be a positive pole inverter. No default.\n\nvcmod::Float64\nMode switch DC voltage; entered in kV. When any inverter DC voltage magnitude falls below this value and the line is in power control mode (i.e. mdc = 1), the line switches to current control mode with converter current setpoints corresponding to their desired powers at scheduled DC voltage. vcmod = 0.0 by default.\n\nvconvn::Int32\nBus number, or extended bus name enclosed in single quotes, of the AC converter station bus that controls DC voltage on the negative pole of multi-terminal DC line i. If any negative pole converters are specified (see below), bus vconvn must be a negative pole inverter. If the negative pole is not being modeled, vconvn must be specified as zero. vconvn = 0 by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.DCLineID33","page":"API","title":"PowerFlowData.DCLineID33","text":"struct DCLineID33 <: DCLineID\n\nFields\n\nname::InlineStrings.String15\nThe non-blank alphanumeric identifier assigned to this DC line. Each multi-terminal DC line must have a unique name.name` may be up to twelve characters and may contain any combination of blanks, uppercase letters, numbers and special characters. name must be enclosed in single or double quotes if it contains any blanks or special characters. No default allowed.\n\nnconv::Int8\nNumber of AC converter station buses in multi-terminal DC line i. No default.\nndcbs::Int8\nNumber of DC buses in multi-terminal DC line i (nconv < ndcbs). No default.\nndcln::Int64\nNumber of DC links in multi-terminal DC line i. No default.\nmdc::Int8\nControl mode\n0 - blocked\n1 - power\n2 - current\nmdc = 0 by default.\n\nvconv::Int32\nBus number, or extended bus name enclosed in single quotes, of the AC converter station bus that controls DC voltage on the positive pole of multi-terminal DC line i. Bus vconv must be a positive pole inverter. No default.\n\nvcmod::Float64\nMode switch DC voltage; entered in kV. When any inverter DC voltage magnitude falls below this value and the line is in power control mode (i.e. mdc = 1), the line switches to current control mode with converter current setpoints corresponding to their desired powers at scheduled DC voltage. vcmod = 0.0 by default.\n\nvconvn::Int32\nBus number, or extended bus name enclosed in single quotes, of the AC converter station bus that controls DC voltage on the negative pole of multi-terminal DC line i. If any negative pole converters are specified (see below), bus vconvn must be a negative pole inverter. If the negative pole is not being modeled, vconvn must be specified as zero. vconvn = 0 by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.ACConverters","page":"API","title":"PowerFlowData.ACConverters","text":"struct ACConverters <: PowerFlowData.Records\n\nFields\n\nib::Vector{Int32}\nAC converter bus number, or extended bus name enclosed in single quotes. No default.\n\nn::Vector{Int8}\nNumber of bridges in series. No default.\nangmx::Vector{Float64}\nNominal maximum ALPHA or GAMMA angle; entered in degrees. No default.\nangmn::Vector{Float64}\nMinimum steady-state ALPHA or GAMMA angle; entered in degrees. No default.\nrc::Vector{Float64}\nCommutating resistance per bridge; entered in ohms. No default.\nxc::Vector{Float64}\nCommutating reactance per bridge; entered in ohms. No default.\nebas::Vector{Float64}\nPrimary base AC voltage; entered in kV. No default.\ntr::Vector{Float64}\nActual transformer ratio. tr = 1.0 by default.\ntap::Vector{Float64}\nTap setting. tap = 1.0 by default.\ntpmx::Vector{Float64}\nMaximum tap setting. tpmx = 1.5 by default.\ntpmn::Vector{Float64}\nMinimum tap setting. tpmx = 0.51 by default.\ntstp::Vector{Float64}\nTap step; must be a positive number. tstp = 0.00625 by default.\nsetvl::Vector{Float64}\nConverter setpoint. When ib is equal to vconv or vconvn, setvl specifies the scheduled DC voltage magnitude, entered in kV, across the converter. For other converter buses, setvl contains the converter current (amps) or power (MW) demand; a positive value of setvl indicates that bus ib is a rectifier, and a negative value indicates an inverter. No default.\n\ndcpf::Vector{Float64}\nConverter participation factor. When the order at any rectifier in the multi-terminal DC line is reduced, either to maximum current or margin, the orders at the remaining converters on the same pole are modified according to their DCPFs to: SETVL + (DCPFSUM)RwhereSUMis the sum of theDCPFs at the unconstrained converte rs on the same pole as the constrained rectifier, andRis the order reduction at the constrained rectifier.dcpf` = 1. by default.\n\nmarg::Vector{Float64}\nRectifier margin entered in per unit of desired DC power or current. The converter order reduced by this fraction, (10 - MARG)  SETVL, defines the minimum order for this rectifier. marg is used only at rectifiers. marg = 0.0 by default.\n\ncnvcod::Vector{Int8}\nConverter code. A positive value or zero must be entered if the converter is on the positive pole of multi-terminal DC line i. A negative value must be entered for negative pole converters. cnvcod = 1 by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.DCBuses","page":"API","title":"PowerFlowData.DCBuses","text":"struct DCBuses <: PowerFlowData.Records\n\nFields\n\nidc::Vector{Int32}\nDC bus number (1 to NDCBS). The DC buses are used internally within each multi-terminal DC line and must be numbered 1 through ndcbs. no default.\n\nib::Vector{Int32}\nAC converter bus number, or extended bus name enclosed in single quotes, or zero. Each converter station bus specified in a converter record must be specified as ib in exactly one DC bus record. DC buses that are connected only to other DC buses by DC links and not to any AC converter buses must have a zero specified for ib. A DC bus specified as idc2 on one or more other DC bus records must have a zero specified for ib on its own DC bus record. ib = 0 by default.\n\nia::Vector{Int16}\nArea number (1 through the maximum number of areas at the current size level). ia = 1 by default.\n\nzone::Vector{Int16}\nZone number (1 through the maximum number of zones at the current size level). zone = 1 by default.\n\nname::Vector{InlineStrings.String15}\nAlphanumeric identifier assigned to DC bus idc. The name may be up to twelve characters and must be enclosed in single quotes. name may contain any combination of blanks, uppercase letters, numbers, and special characters. name is twelve blanks by default.\n\nidc2::Vector{Int32}\nrgrnd::Vector{Float64}\nSecond DC bus to which converter ib is connected, or zero if the converter is connected directly to ground.\nFor voltage controlling converters, this is the DC bus with the lower DC voltage magnitude   and setvl specifies the voltage difference between buses idc and idc2.\nFor rectifiers, DC buses should be specified such that power flows from bus idc2 to bus idc.\nFor inverters, DC buses should be specified such that power flows from bus idc to bus idc2.\nidc2 is ignored on those dc bus records that have ib specified as zero. idc2 = 0 by default.\n\nowner::Vector{Int16}\nOwner number (1 through the maximum number of owners at the current size level). owner = 1 by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.DCLinks","page":"API","title":"PowerFlowData.DCLinks","text":"struct DCLinks <: PowerFlowData.Records\n\nFields\n\nidc::Vector{Int32}\nBranch \"from bus\" DC bus number.\njdc::Vector{Int32}\nBranch \"to bus\" DC bus number. jdc is entered as a negative number to designate it as the metered end for area and zone interchange calculations. Otherwise, bus idc is assumed to be the metered end.\n\ndcckt::Vector{InlineStrings.String1}\nOne-character uppercase alphanumeric branch circuit identifier. It is recommended that single circuit branches be designated as having the circuit identifier \"1\". dcckt = \"1\" by default.\n\nrdc::Vector{Float64}\nDC link resistance, entered in ohms. No default.\nldc::Vector{Float64}\nDC link inductance, entered in mH. ldc is not used by the power flow solution activities but is available to multi-terminal DC line dynamics models. ldc = 0.0 by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Multi-Section-Line-Groups","page":"API","title":"Multi-Section Line Groups","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"MultiSectionLineGroups\nMultiSectionLineGroups30\nMultiSectionLineGroups33","category":"page"},{"location":"api.html#PowerFlowData.MultiSectionLineGroups","page":"API","title":"PowerFlowData.MultiSectionLineGroups","text":"abstract type MultiSectionLineGroups <: PowerFlowData.Records\n\nThe MultiSectionLineGroups data record depends on the PSSE version:\n\nSee MultiSectionLineGroups30 for PSSE v30 files.\nSee MultiSectionLineGroups33 for PSSE v33 files.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.MultiSectionLineGroups30","page":"API","title":"PowerFlowData.MultiSectionLineGroups30","text":"struct MultiSectionLineGroups30 <: MultiSectionLineGroups\n\nMulti-section line groups.\n\nTransmission lines commonly have a series of sections with varying physical structures. The section might have different tower configurations, conductor types and bundles or various combinations of these. The physical differences can result in the sections having different resistance, reactance and charging.\n\nA transmission line with several distinct sections can be represented as one multi-section line group.\n\nThe DUM_i values on each record define the branches connecting bus i to bus j, and are entered so as to trace the path from bus i to bus j.\n\nExample\n\nFor a multi-section line grouping consisting of three line sections (and hence two dummy buses):\n\nFrom To Circuit\nI D1 C1\nD1 D2 C2\nD2 J C3\n\nIf this multi-section line grouping is to be assigned the line identifier id \"&1\", the corresponding multi-section line grouping data record is given by:\n\nI, J, '&1', D1, D2\n\nOr in v33 (and if I is the metered end):\n\nI, J, '&1', 1, D1, D2\n\nNotes\n\nThe following notes apply to multi-section line groups:\n\nUp to 10 line sections (and hence 9 dummy buses) may be defined in each multi-section line grouping.\n\nA branch may be a line section of at most one multi-section line grouping.\n\nEach dummy bus must have exactly two branches connected to it,\n\nboth of which must be members of the same multi-section line grouping. A multi-section line dummy bus may not be a converter bus of a DC transmission line. A FACTS control device may not be connected to a multi-section line dummy bus.\n\nThe status of line sections and type codes of dummy buses are set such that the multi-section\n\nline is treated as a single entity with regards to its service status.\n\nFields\n\ni::Vector{Int32}\n\"From bus\" number, or extended bus name enclosed in single quotes.\nj::Vector{Int32}\n\"To bus\" number, or extended bus name enclosed in single quotes. j is entered as a negative number or with a minus sign before the first character of the extended bus name to designate it as the metered end; otherwise, bus i is assumed to be the metered end.\n\nid::Vector{InlineStrings.String3}\nTwo-character upper-case alphanumeric multi-section line grouping identifier. The first character must be an ampersand (\"&\"). id = \"&1\" by default.\n\ndum1::Vector{Int32}\nBus numbers, or extended bus names enclosed in single quotes, of the dummy buses connected by the branches that comprise this multi-section line grouping. No defaults.\n\ndum2::Vector{Union{Missing, Int32}}\ndum3::Vector{Union{Missing, Int32}}\ndum4::Vector{Union{Missing, Int32}}\ndum5::Vector{Union{Missing, Int32}}\ndum6::Vector{Union{Missing, Int32}}\ndum7::Vector{Union{Missing, Int32}}\ndum8::Vector{Union{Missing, Int32}}\ndum9::Vector{Union{Missing, Int32}}\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.MultiSectionLineGroups33","page":"API","title":"PowerFlowData.MultiSectionLineGroups33","text":"struct MultiSectionLineGroups33 <: MultiSectionLineGroups\n\nMulti-section line groups.\n\nTransmission lines commonly have a series of sections with varying physical structures. The section might have different tower configurations, conductor types and bundles or various combinations of these. The physical differences can result in the sections having different resistance, reactance and charging.\n\nA transmission line with several distinct sections can be represented as one multi-section line group.\n\nThe DUM_i values on each record define the branches connecting bus i to bus j, and are entered so as to trace the path from bus i to bus j.\n\nExample\n\nFor a multi-section line grouping consisting of three line sections (and hence two dummy buses):\n\nFrom To Circuit\nI D1 C1\nD1 D2 C2\nD2 J C3\n\nIf this multi-section line grouping is to be assigned the line identifier id \"&1\", the corresponding multi-section line grouping data record is given by:\n\nI, J, '&1', D1, D2\n\nOr in v33 (and if I is the metered end):\n\nI, J, '&1', 1, D1, D2\n\nNotes\n\nThe following notes apply to multi-section line groups:\n\nUp to 10 line sections (and hence 9 dummy buses) may be defined in each multi-section line grouping.\n\nA branch may be a line section of at most one multi-section line grouping.\n\nEach dummy bus must have exactly two branches connected to it,\n\nboth of which must be members of the same multi-section line grouping. A multi-section line dummy bus may not be a converter bus of a DC transmission line. A FACTS control device may not be connected to a multi-section line dummy bus.\n\nThe status of line sections and type codes of dummy buses are set such that the multi-section\n\nline is treated as a single entity with regards to its service status.\n\nFields\n\ni::Vector{Int32}\n\"From bus\" number, or extended bus name enclosed in single quotes.\nj::Vector{Int32}\n\"To bus\" number, or extended bus name enclosed in single quotes. j is entered as a negative number or with a minus sign before the first character of the extended bus name to designate it as the metered end; otherwise, bus i is assumed to be the metered end.\n\nid::Vector{InlineStrings.String3}\nTwo-character upper-case alphanumeric multi-section line grouping identifier. The first character must be an ampersand (\"&\"). id = \"&1\" by default.\n\nmet::Vector{Int8}\nMetered end flag.\n≤1 to designate bus i as the metered end.\n≥2 to designate bus j as the metered end.\nmet = 1 by default.\n\ndum1::Vector{Int32}\nBus numbers, or extended bus names enclosed in single quotes, of the dummy buses connected by the branches that comprise this multi-section line grouping. No defaults.\n\ndum2::Vector{Union{Missing, Int32}}\ndum3::Vector{Union{Missing, Int32}}\ndum4::Vector{Union{Missing, Int32}}\ndum5::Vector{Union{Missing, Int32}}\ndum6::Vector{Union{Missing, Int32}}\ndum7::Vector{Union{Missing, Int32}}\ndum8::Vector{Union{Missing, Int32}}\ndum9::Vector{Union{Missing, Int32}}\n\n\n\n\n\n","category":"type"},{"location":"api.html#Zones","page":"API","title":"Zones","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Zones","category":"page"},{"location":"api.html#PowerFlowData.Zones","page":"API","title":"PowerFlowData.Zones","text":"struct Zones <: PowerFlowData.Records\n\nAll buses (AC and DC) and loads can be assigned to reside in a zone of the network. To enable this facility, each zone should be assigned a name and number. Specifically, the zone number is entered as part of the data records for the Buses and Loads. The use of zones enables the user to develop reports and to check results on the basis of zones and, consequently be highly specific when reporting and interpreting analytical results.\n\nFields\n\ni::Vector{Int16}\nZone number (1 through the maximum number of zones at the current size level)\nzoname::Vector{InlineStrings.String15}\nAlphanumeric identifier assigned to zone i. The name may contain up to twelve characters and must be enclosed in single quotes. zoname may be any combination of blanks, uppercase letters, numbers, and special characters. zoname is set to twelve blanks by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Inter-Area-Transfers","page":"API","title":"Inter-Area Transfers","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"InterAreaTransfers","category":"page"},{"location":"api.html#PowerFlowData.InterAreaTransfers","page":"API","title":"PowerFlowData.InterAreaTransfers","text":"struct InterAreaTransfers <: PowerFlowData.Records\n\nUsing PSS/E, the user has the capability to identify in which area each bus or load resides. Further, the user can schedule active power transfers between pairs of areas.\n\nSee AreaInterchanges for desired net interchange.\n\nFields\n\narfrom::Vector{Int16}\n\"From area\" number (1 through the maximum number of areas at the current size level).\narto::Vector{Int16}\n\"To area\" number (1 through the maximum number of areas at the current size level).\ntrid::Vector{InlineStrings.String1}\nSingle-character (0 through 9 or A through Z) upper-case interarea transfer identifier used to distinguish among multiple transfers between areas arfrom and arto. trid = \"1\" by default.\n\nptran::Vector{Float64}\nMW comprising this transfer. A positive ptran indicates that area arfrom is selling to area arto. ptran = 0.0 by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#Owners","page":"API","title":"Owners","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Owners","category":"page"},{"location":"api.html#PowerFlowData.Owners","page":"API","title":"PowerFlowData.Owners","text":"struct Owners <: PowerFlowData.Records\n\nPSS/E allows the user to identify which organization or utility actually owns a facility, a piece of equipment, or a load. Major network elements can have up to four different owners. This facilitates interpretation of results and reporting of results on the basis of ownership.\n\n# Fields\n\ni::Vector{Int16}\nOwner number (1 through the maximum number of owners at the current size level).\nowname::Vector{InlineStrings.String15}\nAlphanumeric identifier assigned to owner i. The name may contain up to twelve characters and must be enclosed in single quotes. owname may be any combination of blanks, uppercase letters, numbers, and special characters. owname is set to twelve blanks by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#FACTS-Devices","page":"API","title":"FACTS Devices","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"FACTSDevices\nFACTSDevices30\nFACTSDevices33","category":"page"},{"location":"api.html#PowerFlowData.FACTSDevices","page":"API","title":"PowerFlowData.FACTSDevices","text":"abstract type FACTSDevices <: PowerFlowData.Records\n\nThe FACTSDevices data record depends on the PSSE version:\n\nSee FACTSDevices30 for PSSE v30 files.\nSee FACTSDevices33 for PSSE v33 files.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.FACTSDevices30","page":"API","title":"PowerFlowData.FACTSDevices30","text":"struct FACTSDevices30 <: FACTSDevices\n\nFlexible AC Transmission System devices.\n\nThere is a multiplicity of Flexible AC Transmission System devices currently available comprising shunt devices, such as the Static Compensator (STATCOM), series devices such as the Static Synchronous Series Compensator (SSSC), combined devices such as the Unified Power Flow Controller (UPFC) and the Interline Power Flow Controllers (IPFC), of which the latter are parallel series devices.\n\nFields\n\nn::Vector{Int16}\nFACTS device number.\ni::Vector{Int32}\nSending end bus number, or extended bus name enclosed in single quotes. No default.\n\nj::Vector{Int32}\nTerminal end bus number, or extended bus name enclosed in single quotes. 0 for a STATCON. j = 0 by default.\n\nmode::Vector{Int8}\nControl mode:\n0 - out-of-service (i.e., series and shunt links open).\n1 - series and shunt links operating.\n2 - series link bypassed (i.e., like a zero impedance line) and shunt link operating as a STATCON.\n3 - series and shunt links operating with series link at constant series impedance.\n4 - series and shunt links operating with series link at constant series voltage.\n5 - master device of an IPFC with P and Q setpoints specified;   FACTS device N+1 must be the slave device (i.e., its mode is 6 or 8) of this IPFC.\n6 - slave device of an IPFC with P and Q setpoints specified;   FACTS device N-1 must be the master device (i.e., its mode is 5 or 7) of this IPFC.   The Q setpoint is ignored as the master device dictates the active power exchanged between the two devices.\n7 - master device of an IPFC with constant series voltage setpoints specified;   FACTS device N+1 must be the slave device (i.e., its mode is 6 or 8) of this IPFC.\n8 - slave device of an IPFC with constant series voltage setpoints specified;   FACTS device N-1 must be the master device (i.e., its mode is 5 or 7) of this IPFC.   The complex V_d + j V_q setpoint is modified during power flow solutions to reflect   the active power exchange determined by the master device.\nIf j is specified as 0, mode must be either 0 or 1. mode = 1 by default.\n\npdes::Vector{Float64}\nDesired active power flow arriving at the terminal end bus; entered in MW. pdes = 0.0 by default.\n\nqdes::Vector{Float64}\nDesired reactive power flow arriving at the terminal end bus; entered in MVAR. qdes = 0.0 by default.\n\nvset::Vector{Float64}\nVoltage setpoint at the sending end bus; entered in pu. vset = 1.0 by default.\nshmx::Vector{Float64}\nMaximum shunt current at the sending end bus; entered in MVA at unity voltage. shmx = 9999.0 by default.\n\ntrmx::Vector{Float64}\nMaximum bridge active power transfer; entered in MW. trmx = 9999.0 by default.\nvtmn::Vector{Float64}\nMinimum voltage at the terminal end bus; entered in pu. vtmn = 0.9 by default.\nvtmx::Vector{Float64}\nMaximum voltage at the terminal end bus; entered in pu. vtmx = 1.1 by default.\nvsmx::Vector{Float64}\nMaximum series voltage; entered in pu. vsmx = 1.0 by default.\nimx::Vector{Float64}\nMaximum series current, or zero for no series current limit; entered in MVA at unity voltage. imx = 0.0 by default.\n\nlinx::Vector{Float64}\nReactance of the dummy series element used during model solution; entered in pu. linx = 0.05 by default.\n\nrmpct::Vector{Float64}\nPercent of the total Mvar required to hold the voltage at bus i that are to be contributed by the shunt element of this FACTS device; rmpct must be positive. rmpct is needed only if there is more than one local or remote voltage controlling device (plant, switched shunt, FACTS device shunt element, or VSC dc line converter) controlling the voltage at bus i to a setpoint. rmpct = 100.0 by default.\n\nowner::Vector{Int16}\nOwner number (1 through the maximum number of owners at the current size level). owner = 1 by default.\n\nset1::Vector{Float64}\nIf mode is 3, resistance and reactance respectively of the constant impedance, entered in pu; if mode is 4, the magnitude (in pu) and angle (in degrees) of the constant series voltage with respect to the quantity indicated by vsref; if mode is 7 or 8, the real (vd) and imaginary (vq) components (in pu) of the constant series voltage with respect to the quantity indicated by vsref; for other values of mode, set1 and set2 are read, but not saved or used during power flow solutions. set1 = 0.0 by default.\n\nset2::Vector{Float64}\nSee set1. set2 = 0.0 by default.\nvsref::Vector{Int8}\nSeries voltage reference code to indicate the series voltage reference of set1 and set2 when mode is 4, 7 or 8: 0 for sending end voltage, 1 for series current. vsref = 0 by default.\n\n\n\n\n\n","category":"type"},{"location":"api.html#PowerFlowData.FACTSDevices33","page":"API","title":"PowerFlowData.FACTSDevices33","text":"struct FACTSDevices33 <: FACTSDevices\n\nFlexible AC Transmission System devices.\n\nThere is a multiplicity of Flexible AC Transmission System devices currently available comprising shunt devices, such as the Static Compensator (STATCOM), series devices such as the Static Synchronous Series Compensator (SSSC), combined devices such as the Unified Power Flow Controller (UPFC) and the Interline Power Flow Controllers (IPFC), of which the latter are parallel series devices.\n\nFields\n\nname::Vector{InlineStrings.String15}\nThe non-blank alphanumeric identifier assigned to this FACTS device. Each FACTS device must have a unique name.name` may be up to twelve characters and may contain any combination of blanks, uppercase letters, numbers and special characters. name must be enclosed in single or double quotes if it contains any blanks or special characters. No default allowed.\n\ni::Vector{Int32}\nSending end bus number, or extended bus name enclosed in single quotes. No default.\n\nj::Vector{Int32}\nTerminal end bus number, or extended bus name enclosed in single quotes. 0 for a STATCON. j = 0 by default.\n\nmode::Vector{Int8}\nControl mode:\n0 - out-of-service (i.e., series and shunt links open).\n1 - series and shunt links operating.\n2 - series link bypassed (i.e., like a zero impedance line) and shunt link operating as a STATCON.\n3 - series and shunt links operating with series link at constant series impedance.\n4 - series and shunt links operating with series link at constant series voltage.\n5 - master device of an IPFC with P and Q setpoints specified;   FACTS device N+1 must be the slave device (i.e., its mode is 6 or 8) of this IPFC.\n6 - slave device of an IPFC with P and Q setpoints specified;   FACTS device N-1 must be the master device (i.e., its mode is 5 or 7) of this IPFC.   The Q setpoint is ignored as the master device dictates the active power exchanged between the two devices.\n7 - master device of an IPFC with constant series voltage setpoints specified;   FACTS device N+1 must be the slave device (i.e., its mode is 6 or 8) of this IPFC.\n8 - slave device of an IPFC with constant series voltage setpoints specified;   FACTS device N-1 must be the master device (i.e., its mode is 5 or 7) of this IPFC.   The complex V_d + j V_q setpoint is modified during power flow solutions to reflect   the active power exchange determined by the master device.\nIf j is specified as 0, mode must be either 0 or 1. mode = 1 by default.\n\npdes::Vector{Float64}\nDesired active power flow arriving at the terminal end bus; entered in MW. pdes = 0.0 by default.\n\nqdes::Vector{Float64}\nDesired reactive power flow arriving at the terminal end bus; entered in MVAR. qdes = 0.0 by default.\n\nvset::Vector{Float64}\nVoltage setpoint at the sending end bus; entered in pu. vset = 1.0 by default.\nshmx::Vector{Float64}\nMaximum shunt current at the sending end bus; entered in MVA at unity voltage. shmx = 9999.0 by default.\n\ntrmx::Vector{Float64}\nMaximum bridge active power transfer; entered in MW. trmx = 9999.0 by default.\nvtmn::Vector{Float64}\nMinimum voltage at the terminal end bus; entered in pu. vtmn = 0.9 by default.\nvtmx::Vector{Float64}\nMaximum voltage at the terminal end bus; entered in pu. vtmx = 1.1 by default.\nvsmx::Vector{Float64}\nMaximum series voltage; entered in pu. vsmx = 1.0 by default.\nimx::Vector{Float64}\nMaximum series current, or zero for no series current limit; entered in MVA at unity voltage. imx = 0.0 by default.\n\nlinx::Vector{Float64}\nReactance of the dummy series element used during model solution; entered in pu. linx = 0.05 by default.\n\nrmpct::Vector{Float64}\nPercent of the total Mvar required to hold the voltage at bus i that are to be contributed by the shunt element of this FACTS device; rmpct must be positive. rmpct is needed only if there is more than one local or remote voltage controlling device (plant, switched shunt, FACTS device shunt element, or VSC dc line converter) controlling the voltage at bus i to a setpoint. rmpct = 100.0 by default.\n\nowner::Vector{Int16}\nOwner number (1 through the maximum number of owners at the current size level). owner = 1 by default.\n\nset1::Vector{Float64}\nIf mode is 3, resistance and reactance respectively of the constant impedance, entered in pu; if mode is 4, the magnitude (in pu) and angle (in degrees) of the constant series voltage with respect to the quantity indicated by vsref; if mode is 7 or 8, the real (vd) and imaginary (vq) components (in pu) of the constant series voltage with respect to the quantity indicated by vsref; for other values of mode, set1 and set2 are read, but not saved or used during power flow solutions. set1 = 0.0 by default.\n\nset2::Vector{Float64}\nSee set1. set2 = 0.0 by default.\nvsref::Vector{Int8}\nSeries voltage reference code to indicate the series voltage reference of set1 and set2 when mode is 4, 7 or 8: 0 for sending end voltage, 1 for series current. vsref = 0 by default.\n\nremot::Vector{Int32}\nBus number, or extended bus name enclosed in single quotes, of a remote Type 1 or 2 bus where voltage is to be regulated by the shunt element of this FACTS device to the value specified by vset. if bus remot is other than a type 1 or 2 bus, the shunt element regulates voltage at the sending end bus to the value specified by vset. remot is entered as zero if the shunt element is to regulate voltage at the sending end bus and must be zero if the sending end bus is a type 3 (swing) bus. remot = 0 by default.\n\nmname::Vector{InlineStrings.String15}\nThe name of the FACTS device that is the IPFC master device when this FACTS device is the \"slave\" device of an IPFC (i.e., its mode is specified as 6 or 8). mname must be enclosed in single or double quotes if it contains any blanks or special characters. mname is blank by default.\n\n\n\n\n\n","category":"type"},{"location":"alternatives.html#Alternatives","page":"Alternatives","title":"Alternatives","text":"","category":"section"},{"location":"alternatives.html#Julia","page":"Alternatives","title":"Julia","text":"","category":"section"},{"location":"alternatives.html","page":"Alternatives","title":"Alternatives","text":"I am are aware of two other open-source packages with functionality to parse PSS/E files:","category":"page"},{"location":"alternatives.html","page":"Alternatives","title":"Alternatives","text":"PowerModels.jl\nPowerSystems.jl","category":"page"},{"location":"alternatives.html","page":"Alternatives","title":"Alternatives","text":"I have not used either so cannot recommend one over the other. From what I can see, these parsers are almost identical to each other. It seems PowerSystems.jl originally vendored the PowerModels.jl code, but the parsers may have diverged slightly over time.","category":"page"},{"location":"alternatives.html","page":"Alternatives","title":"Alternatives","text":"Both of these packages only support parsing v33 PSS/E files, and only parse a subset of the data categories in the file. Whereas PowerFlowData.jl (this package) can parse all data categories from both v30 and v33 PSS/E files.","category":"page"},{"location":"alternatives.html","page":"Alternatives","title":"Alternatives","text":"Importantly, these alternatives also take a completely different approach to this package. These other parsers read the .raw files as a String (e.g. using readlines), then operate on string data, and parse strings into other Julia types as necessary. PowerFlowData.jl reads the .raw files as a bytes buffer (Vector{UInt8}) then parses the bytes directly into Julia types, which is much faster and more memory efficient.","category":"page"},{"location":"alternatives.html","page":"Alternatives","title":"Alternatives","text":"This package was originally developed as a fun exercise, but should correctly implement the full data format specification. Please feel encouraged to give this package a try, and open issues if you encounter any problems or missing features.","category":"page"},{"location":"alternatives.html#Others","page":"Alternatives","title":"Others","text":"","category":"section"},{"location":"alternatives.html","page":"Alternatives","title":"Alternatives","text":"In Python, there is a package named grg-pssedata, which says it parses PSSE v33 data files.","category":"page"},{"location":"alternatives.html","page":"Alternatives","title":"Alternatives","text":"In Matlab, the MATPOWER package says it has parsing functionality for (unspecified) PSSE data files.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = PowerFlowData","category":"page"},{"location":"index.html#PowerFlowData","page":"Home","title":"PowerFlowData","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"PowerFlowData.jl provides a parser for PSS/E-format .raw Power Flow Data Files.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To read a .raw file, use parse_network:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"parse_network(\"file.raw\")","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This will return a Network object, which contains the data parsed into dedicated structures matching the PSS/E-format specification.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"You can specify what version of the PSS/E data format the file is in using the v keyword, like:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"parse_network(\"file.raw\"; v=33)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Alternatively, the version of the data format will automatically be determined when parsing. Versions 30 and 33 of the format are currently supported.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"You can specify which character separates values in the file using the delim keyword, like:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"parse_network(\"file.raw\"; delim=' ')","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If not specified, the delimiter will automatically be detected when parsing. Comma delimited files delim=',' and space delimited files delim=' ' are currently supported.","category":"page"},{"location":"index.html#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Usually your data will be in a file, and you'd read it with parse_network(\"file.raw\"), but here we'll pass in the data directly, to show how it matches to the output:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using PowerFlowData, DataFrames\ndata = IOBuffer(\"\"\"\n    0,   100.00          / PSS/E-30.3    WED, SEP 15 2021  21:04\n    SE SNAPSHOT 15-09-2021 PEAK CASE 18:00\n    FULL COPY OF SYNTHETIC\n         1,'AAA    3    ', 111.0000,4,     0.000,     0.000, 327,   1,0.00000,   0.0000,   1\n    222222,'PRPR C D    ',  42.0000,1,     0.000,     0.000, 694,  24,1.11117,  20.0606,   7\n    0 / END OF BUS DATA, BEGIN LOAD DATA\n    \"\"\"\n);\nnetwork = parse_network(data; v=30);\nNamedTuple(network.caseid)  # Case Identification data is a single row.\nDataFrame(network.buses)    # Bus data, and all other data, is a table.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"For working with the tabular data within a Network directly you can use Tables.jl. For example, to iterate the Buses:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Tables\nfor bus in Tables.rows(network.buses)\n    @show bus.name\nend","category":"page"},{"location":"implementation.html#Implementation-details","page":"Implementation","title":"Implementation details","text":"","category":"section"},{"location":"implementation.html","page":"Implementation","title":"Implementation","text":"This page has rough notes about the internals of PowerFlowData.jl.","category":"page"},{"location":"implementation.html","page":"Implementation","title":"Implementation","text":"We use Parsers.jl to parse bytes into Julia types. Broadly speaking, we use Parsers.Options to configure the parsing based on the .raw format (e.g. , characters are delimiters), and then Parsers.xparse to actually parse the bytes between delimiters into the expected Julia types. The expected Julia type depends on the category of data we are reading at that point in the file (buses, loads, …); if the PSS/E user manual says \"load records\" should come after \"bus records\", and each load record should have 12 columns with the first column containing an integer \"bus number\", then we try to parse the first value in a load record as an Int, and so on.","category":"page"},{"location":"implementation.html","page":"Implementation","title":"Implementation","text":"The aim is to capture the domain knowledge / format specification in the types, and keep the parsing code as minimal as possible (relying on the types for the domain knowledge). When trying to support multiple versions of the format, the rough strategy is:","category":"page"},{"location":"implementation.html","page":"Implementation","title":"Implementation","text":"if a wholly new data category exists in the new format, create a new Records subtype\nif a data category has added a new column to the end of a record, add a new Union{T, Missing} field to the existing Records subtype\nif a data category has added/removed columns in the middle of a record, or changed the element type of a column, create a new Records subtype with a common supertype as the existing Records subtype for the category (e.g. Buses30 <: Buses, Buses33 <: Buses, Buses <: Records)\nif a version-specific Records subtype is being used, update the top-level parse_network function to parse the records into the appropriate type, and in the order expected by the version of the format (using the version number extracted as part of the Case ID data).","category":"page"}]
}
